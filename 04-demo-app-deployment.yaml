---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: demo-app
  name: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-init-first: 'true'
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-secret-db-creds: database/creds/readonly-role
        vault.hashicorp.com/agent-inject-template-db-creds: |
          {{- with secret "database/creds/readonly-role" -}}
          DB_USER={{ .Data.username }}
          DB_PASSWORD={{ .Data.password }}
          {{- end }}
        vault.hashicorp.com/agent-pre-populate: 'true'
        vault.hashicorp.com/role: myapp-role
      labels:
        app: demo-app
    spec:
      containers:
        - args:
            - |
              pip install flask psycopg2-binary requests pyOpenSSL;

              cat <<EOF > app.py
              from flask import Flask, request, render_template_string
              import psycopg2, os, time, datetime, requests

              app = Flask(__name__)

              def load_env_file(path):
                  creds = {}
                  with open(path) as f:
                      for line in f:
                          if "=" in line:
                              k, v = line.strip().split("=", 1)
                              creds[k] = v
                  return creds

              @app.route("/")
              def index():
                  secret_path = "/vault/secrets/db-creds"
                  if not os.path.exists(secret_path):
                      return "<h2 style='color:red;'>Vault„ÅÆ„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</h2>"
                  try:
                      creds = load_env_file(secret_path)
                  except Exception as e:
                      return f"<h2 style='color:red;'>„Ç∑„Éº„ÇØ„É¨„ÉÉ„ÉàË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}</h2>"

                  try:
                      connection = psycopg2.connect(
                          host="postgres",
                          dbname="inventorydb",
                          user=creds["DB_USER"],
                          password=creds["DB_PASSWORD"]
                      )
                      cursor = connection.cursor()
                      cursor.execute("SELECT name, stock, updated_at FROM inventory")
                      items = [{"name": r[0], "stock": r[1], "updated_at": r[2]} for r in cursor.fetchall()]
                      cursor.close()
                      connection.close()
                  except Exception as db_err:
                      return f"<h2 style='color:red;'>DBÊé•Á∂ö„Ç®„É©„Éº: {db_err}</h2>"

                  html_template = '''
                  <!DOCTYPE html>
                  <html lang="ja">
                  <head>
                      <meta charset="UTF-8">
                      <title>Âú®Â∫´ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†</title>
                      <style>
                          body { font-family: sans-serif; margin: 40px; background-color: #f9f9f9; }
                          h1 { color: #333; }
                          table { width: 80%; border-collapse: collapse; margin-top: 20px; }
                          th, td { border: 1px solid #ccc; padding: 12px; text-align: center; }
                          th { background-color: #f0f0f0; }
                          tr:nth-child(even) { background-color: #fdfdfd; }
                      </style>
                  </head>
                  <body>
                      <h1>Âú®Â∫´ÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</h1>
                      <table>
                          <thead>
                              <tr>
                                  <th>ÂïÜÂìÅÂêç</th>
                                  <th>Âú®Â∫´Êï∞</th>
                                  <th>ÊúÄÁµÇÊõ¥Êñ∞Êó•</th>
                              </tr>
                          </thead>
                          <tbody>
                              {% for item in items %}
                              <tr>
                                  <td>{{ item['name'] }}</td>
                                  <td>{{ item['stock'] }}</td>
                                  <td>{{ item['updated_at'] }}</td>
                              </tr>
                              {% endfor %}
                          </tbody>
                      </table> 
                  </body>
                  </html>
                  '''
                  return render_template_string(html_template, items=items)

              @app.route("/transit", methods=["GET", "POST"])
              def transit_demo():
                  VAULT_ADDR = "http://vault:8200"
                  VAULT_TOKEN = "root"
                  KEY_NAME = "my-transit-key"

                  encrypt_input = decrypt_input = ""
                  ciphertext = plaintext = ""
                  encrypt_curl = decrypt_curl = ""

                  if request.method == "POST":
                      mode = request.form.get("mode")

                      if mode == "encrypt":
                          encrypt_input = request.form["encrypt_input"]
                          b64 = encrypt_input.encode("utf-8").hex()
                          res = requests.post(
                              f"{VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}",
                              headers={"X-Vault-Token": VAULT_TOKEN},
                              json={"plaintext": b64}
                          ).json()
                          ciphertext = res["data"]["ciphertext"]
                          encrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"plaintext\":\"{b64}\"}}' {VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}"

                      elif mode == "decrypt":
                          decrypt_input = request.form["decrypt_input"]
                          res = requests.post(
                              f"{VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}",
                              headers={"X-Vault-Token": VAULT_TOKEN},
                              json={"ciphertext": decrypt_input}
                          ).json()
                          dec = res["data"]["plaintext"]
                          plaintext = bytes.fromhex(dec).decode("utf-8")
                          decrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"ciphertext\":\"{decrypt_input}\"}}' {VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}"

                  return f"""
                  <html>
                  <body>
                    <h2>üîê Vault Transit Engine Demo</h2>
                    <a href="/">‚¨Ö DB Secret „Éá„É¢„Å∏Êàª„Çã</a>
                    <form method="post">
                      <input type="hidden" name="mode" value="encrypt" />
                      <label>Âπ≥Êñá:</label><br>
                      <input name="encrypt_input" value="{encrypt_input}" /><br><br>
                      <button type="submit">üîí ÊöóÂè∑Âåñ</button>
                    </form>
                    <pre>{ciphertext}</pre>
                    <form method="post">
                      <input type="hidden" name="mode" value="decrypt" />
                      <label>ÊöóÂè∑Êñá:</label><br>
                      <textarea name="decrypt_input">{decrypt_input}</textarea><br>
                      <button type="submit">üîì Âæ©Âè∑Âåñ</button>
                    </form>
                    <pre>{plaintext}</pre>
                  </body>
                  </html>
                  """

              if __name__ == "__main__":
                  app.run(host="0.0.0.0", port=5000)
              EOF

              python app.py
          command: ["/bin/sh", "-c"]
          image: python:3.11-slim
          name: app
          ports:
            - containerPort: 5000
          volumeMounts:
            - mountPath: /etc/tls
              name: tls-certs
              readOnly: true
      serviceAccountName: vault
      volumes:
        - emptyDir: {}
          name: tls-certs
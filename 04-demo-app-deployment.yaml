apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
  labels:
    app: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata:
      labels:
        app: demo-app
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "myapp-role"

        # 既存のDBクレデンシャル注入設定
        vault.hashicorp.com/agent-inject-secret-db-creds: "database/creds/readonly-role"
        vault.hashicorp.com/agent-inject-template-db-creds: |
          {{- with secret "database/creds/readonly-role" -}}
          DB_USER={{ .Data.username }}
          DB_PASSWORD={{ .Data.password }}
          {{- end }}
        vault.hashicorp.com/agent-pre-populate: "true"
        vault.hashicorp.com/agent-init-first: "true"

#        # 追加：TLS証明書注入設定
#        vault.hashicorp.com/agent-inject-secret-tls: "pki-int/issue/nginx"
#        vault.hashicorp.com/agent-inject-template-tls.crt: |
#          {{ with secret "pki-int/issue/nginx" "common_name=nginx.example.com" }}
#          {{ .Data.certificate }}
#          {{ .Data.issuing_ca }}
#          {{ range .Data.ca_chain }}
#          {{ . }}
#          {{ end }}
#          {{ end }}
#        vault.hashicorp.com/agent-inject-template-tls.key: |
#          {{ with secret "pki-int/issue/nginx" "common_name=nginx.example.com" }}
#          {{ .Data.private_key }}
#          {{ end }}
    spec:
      serviceAccountName: vault
      containers:
        - name: app
          image: python:3.10-slim
          command: ["/bin/sh", "-c"]
          args:
            - |
              pip install flask psycopg2-binary requests pyOpenSSL;

              cat <<EOF > app.py
              from flask import Flask, request
              import psycopg2, os, time, datetime, requests

              app = Flask(__name__)

              @app.route("/")
              def show_messages():
                  try:
                      creds = {}
                      secret_path = "/vault/secrets/db-creds"
                      with open(secret_path, "r") as f:
                          for line in f:
                              if "=" in line:
                                  key, value = line.strip().split("=", 1)
                                  creds[key] = value

                      updated_epoch = os.path.getmtime(secret_path)
                      updated_str = datetime.datetime.fromtimestamp(updated_epoch).strftime('%Y-%m-%d %H:%M:%S')
                      ttl_seconds = 30
                      elapsed = int(time.time() - updated_epoch)
                      remaining = max(ttl_seconds - elapsed, 0)

                      conn = psycopg2.connect(
                          dbname="demo",
                          user=creds.get("DB_USER"),
                          password=creds.get("DB_PASSWORD"),
                          host="postgres",
                          port=5432
                      )
                      cur = conn.cursor()
                      cur.execute("SELECT * FROM messages;")
                      rows = cur.fetchall()
                      cur.close()
                      conn.close()

                      table = "".join(f"<tr><td>{r[0]}</td><td>{r[1]}</td></tr>" for r in rows)

                      return f"""
                      <html><head><meta http-equiv="refresh" content="3">
                      <style>body {{ font-family: Arial; }}</style></head><body>
                      <a href='/transit'>🔁 Transit デモへ</a>
                      <div class="section">
                        <h2>🔧 Vault Agent Injector の裏側の動作</h2>
                        <ul>
                          <li>✅ <strong>アプリケーション Pod の起動時</strong>、<strong>Vault Agent</strong> が Sidecar コンテナとして自動的に起動</li>
                          <li>✅ Kubernetes の標準機能で自動マウントされた <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code> の JWT を使用し、<strong>Vault Agent</strong> が Vault の Kubernetes Auth Method にログイン</li>
                          <li>✅ <strong>Vault Agent がログイン後に取得した Vault Token</strong> は、メモリ上に安全に保持（ファイルには保存されない構成）</li>
                          <li>✅ <strong>Vault Agent が</strong>、Vault Token を使って <code>database/creds/readonly-role</code> から動的な DB 認証情報（Secret）を取得</li>
                          <li>✅ <strong>アプリケーション Pod 内の Vault Agent Sidecar コンテナが</strong> テンプレートエンジンで Secret を整形し、<strong>共有ボリューム上の <code>/vault/secrets/db-creds</code></strong> にファイル出力</li>
                          <li>🔁 <strong>Secret の TTL が切れると、Vault Agent が自動的に再取得・ファイル再生成</strong>（アプリケーションは再起動不要）</li>
                        </ul>
                      </div>

                      <div class="section">
                        <h2>📂 Secret ファイルの状態</h2>
                        <ul>
                          <li><b>ファイルパス:</b> /vault/secrets/db-creds</li>
                          <li><b>最終更新日時:</b> {updated_str}</li>
                          <li><b>TTL 残り秒数:</b> {remaining} 秒</li>
                          <li><b>DB_USER:</b> {creds.get("DB_USER")}</li>
                          <li><b>DB_PASSWORD:</b> {creds.get("DB_PASSWORD")}</li>
                        </ul>
                      </div>

                      <div class="section">
                        <h2>📋 Messages Table</h2>
                        <table border="1"><tr><th>ID</th><th>Content</th></tr>{table}</table>
                      </div>

                      <div class="section">
                        <h2>🔧 手動コマンドメモ</h2>
                        <ul>
                          <li><b>ポートフォワーディング:</b> kubectl port-forward deployment/demo-app 8080:5000</li>
                          <li><b>データ挿入:</b> 'kubectl exec -it $(kubectl get pod -l app=postgres -o jsonpath="{{{{.items[0].metadata.name}}}}") -- psql -U vaultadmin -d demo -c "INSERT INTO messages (id, content) VALUES (999, 'Manual insert');"'</li>
                        </ul>
                      </div>
                      </body></html>
                      """
                  except Exception as e:
                      return f"<h2>❌ Error:</h2><pre>{e}</pre>"

              @app.route("/transit", methods=["GET", "POST"])
              def transit_demo():
                  VAULT_ADDR = "http://vault:8200"
                  VAULT_TOKEN = "root"
                  KEY_NAME = "my-transit-key"

                  encrypt_input = decrypt_input = ""
                  ciphertext = plaintext = ""
                  encrypt_curl = decrypt_curl = ""

                  if request.method == "POST":
                      mode = request.form.get("mode")

                      if mode == "encrypt":
                          encrypt_input = request.form["encrypt_input"]
                          b64 = encrypt_input.encode("utf-8").hex()
                          res = requests.post(
                              f"{VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}",
                              headers={"X-Vault-Token": VAULT_TOKEN},
                              json={"plaintext": b64}
                          ).json()
                          ciphertext = res["data"]["ciphertext"]
                          encrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"plaintext\":\"{b64}\"}}' {VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}"

                      elif mode == "decrypt":
                          decrypt_input = request.form["decrypt_input"]
                          res = requests.post(
                              f"{VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}",
                              headers={"X-Vault-Token": VAULT_TOKEN},
                              json={"ciphertext": decrypt_input}
                          ).json()
                          dec = res["data"]["plaintext"]
                          plaintext = bytes.fromhex(dec).decode("utf-8")
                          decrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"ciphertext\":\"{decrypt_input}\"}}' {VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}"

                  return f"""
                  <html>
                  <head>
                    <style>
                      body {{ font-family: Arial; }}
                      .container {{ display: flex; gap: 40px; }}
                      .box {{ flex: 1; border: 1px solid #ccc; padding: 20px; }}
                      input, textarea {{ width: 100%; margin-top: 8px; }}
                      textarea {{ height: 100px; }}
                    </style>
                  </head>
                  <body>
                    <h2>🔐 Vault Transit Engine Demo</h2>
                    <a href="/">⬅ DB Secret デモへ戻る</a>
                    <div class="container">
                      <div class="box">
                        <h3>📝 暗号化</h3>
                        <form method="post">
                          <input type="hidden" name="mode" value="encrypt" />
                          <label>平文:</label><br>
                          <input name="encrypt_input" value="{encrypt_input}" /><br><br>
                          <button type="submit">🔒 暗号化</button>
                        </form>
                        {"<h4>暗号化結果:</h4><textarea readonly>" + ciphertext + "</textarea>" if ciphertext else ""}
                        {"<h4>curl:</h4><textarea readonly>" + encrypt_curl + "</textarea>" if encrypt_curl else ""}
                      </div>
                      <div class="box">
                        <h3>🔓 復号化</h3>
                        <form method="post">
                          <input type="hidden" name="mode" value="decrypt" />
                          <label>暗号文:</label><br>
                          <textarea name="decrypt_input">{decrypt_input}</textarea><br>
                          <button type="submit">🔓 復号化</button>
                        </form> 
                        {"<h4>復号結果:</h4><textarea readonly>" + plaintext + "</textarea>" if plaintext else ""}
                        {"<h4>curl:</h4><textarea readonly>" + decrypt_curl + "</textarea>" if decrypt_curl else ""}
                      </div>
                    </div>
                  </body>
                  </html>
                  """

              if __name__ == "__main__":
                  app.run(host="0.0.0.0", port=5000)
              EOF

              python app.py
          ports:
            - containerPort: 5000
          volumeMounts:
            - mountPath: /etc/tls
              name: tls-certs
              readOnly: true
      volumes:
        - name: tls-certs
          emptyDir: {}
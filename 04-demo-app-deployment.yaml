apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: demo-app
  name: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-init-first: 'true'
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-secret-db-creds: database/creds/readonly-role
        vault.hashicorp.com/agent-inject-template-db-creds: |
          {{- with secret "database/creds/readonly-role" -}}
          DB_USER={{ .Data.username }}
          DB_PASSWORD={{ .Data.password }}
          {{- end }}
        vault.hashicorp.com/agent-pre-populate: 'true'
        vault.hashicorp.com/role: myapp-role
      labels:
        app: demo-app
    spec:
      containers:
        - args:
            - |
              pip install flask psycopg2-binary requests pyOpenSSL pytz;

              cat <<EOF > app.py
              from flask import Flask, request, render_template_string, redirect
              import psycopg2, os, time, datetime, requests, pytz 

              app = Flask(__name__)
              is_auto_refresh = True
              initial_creds = {}
              initial_loaded_time = ""

              def load_env_file(path):
                  creds = {}
                  with open(path) as f:
                      for line in f:
                          if "=" in line:
                              k, v = line.strip().split("=", 1)
                              creds[k] = v
                  return creds

              def load_secret(path="/vault/secrets/db-creds"):
                  if not os.path.exists(path):
                      return None, "シークレットファイルが見つかりません", None
                  try:
                      creds = load_env_file(path)
                      updated = os.path.getmtime(path)
                      jst = pytz.timezone("Asia/Tokyo")
                      updated_str = datetime.datetime.fromtimestamp(updated, tz=jst).strftime('%Y-%m-%d %H:%M:%S')
                      vault_max_ttl = 30
                      remaining = max(0, int(vault_max_ttl - (time.time() - updated)))
                      return creds, updated_str, remaining
                  except Exception as e:
                      return None, str(e), None

              @app.route("/toggle", methods=["POST"])
              def toggle():
                  global is_auto_refresh
                  is_auto_refresh = not is_auto_refresh
                  return redirect("/")

              @app.route("/")
              def index():
                  global is_auto_refresh, initial_creds, initial_loaded_time

                  secret_path = "/vault/secrets/db-creds"
                  db_error = False

                  jst = pytz.timezone("Asia/Tokyo")

                  if is_auto_refresh:
                      creds, updated_str, remaining_secs = load_secret(secret_path)
                      if creds is None:
                          return error_screen(updated_str)
                      remaining = f"{remaining_secs} 秒"
                  else:
                      if not initial_creds:
                          initial_creds, initial_loaded_time, _ = load_secret(secret_path)
                      creds, updated_str, _ = initial_creds, initial_loaded_time, 0
                      remaining = "Secret期限切れまであと少し・・・"

                  try:
                      connection = psycopg2.connect(
                          host="postgres",
                          dbname="inventorydb",
                          user=creds["DB_USER"],
                          password=creds["DB_PASSWORD"]
                      )
                      cursor = connection.cursor()
                      cursor.execute("SELECT name, stock, updated_at FROM inventory")
                      items = [{"name": r[0], "stock": r[1], "updated_at": r[2].astimezone(jst).strftime('%Y-%m-%d %H:%M:%S')} for r in cursor.fetchall()]
                      cursor.close()
                      connection.close()
                  except Exception:
                      db_error = True
                      items = []

                  html_template = '''
                  <!DOCTYPE html>
                  <html lang="ja">
                  <head>
                      <meta charset="UTF-8">
                      <meta http-equiv="refresh" content="3">
                      <title>在庫管理ダッシュボード</title>
                      <style>
                          body { font-family: 'Roboto', sans-serif; background-color: #f0f2f5; padding: 40px; }
                          .cards { display: flex; flex-wrap: wrap; gap: 20px; justify-content: center; }
                          .card {
                              background: {{ "white" if not db_error else "#ffe5e5" }};
                              border-radius: 12px;
                              box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                              padding: 20px;
                              width: 280px;
                              border: {{ "none" if not db_error else "2px solid red" }};
                          }
                          .section { margin-top: 40px; text-align: center; }
                          button { font-size: 1em; padding: 10px 20px; margin-bottom: 20px; }
                      </style>
                  </head>
                  <body>
                      <a href='/transit'>🔁 Transit デモへ</a>
                      <h1>📦 在庫管理ダッシュボード</h1>

                      <div style="text-align: center;">
                        <form action="/toggle" method="post" style="display: inline-block;">
                          <button type="submit">自動更新: {{ "ON 🔄" if is_auto_refresh else "OFF ⛔" }}</button>
                        </form>
                      </div>
                      <div class="cards">
                          {% if db_error %}
                          <div class="card">
                              <h3 style="color:red;">⚠ 在庫データ取得エラー</h3>
                              <p>資格情報が無効になっている可能性があります。</p>
                              <p style="color:#888;">自動更新をONにしてVault Agentにより資格情報を更新してください。</p>
                          </div>
                          {% else %}
                          {% for item in items %}
                          <div class="card">
                              <h3>{{ item['name'] }}</h3>
                              <div>在庫数: {{ item['stock'] }}</div>
                              <div>更新日: {{ item['updated_at'] }}</div>
                          </div>
                          {% endfor %}
                          {% endif %}
                      </div>
                      <div class="section">
                          <h2>📂 Secret ファイルの状態</h2>
                          <div style="display: flex; justify-content: center;">
                          <table style="text-align: left;">
                              <tr><th style="padding: 4px 12px;">ファイルパス</th><td>{{ "/vault/secrets/db-creds" }}</td></tr>
                              <tr><th style="padding: 4px 12px;">最終更新日時</th><td>{{ updated_str }}</td></tr>
                              <tr><th style="padding: 4px 12px;">TTL 残り秒数</th><td>{{ remaining }}</td></tr>
                              <tr><th style="padding: 4px 12px;">DB_USER</th><td>{{ creds.get("DB_USER") }}</td></tr>
                              <tr><th style="padding: 4px 12px;">DB_PASSWORD</th><td>{{ creds.get("DB_PASSWORD") }}</td></tr>
                          </table>
                          </div>
                      </div>
                  </body></html>
                  '''

                  return render_template_string(html_template,
                                                items=items,
                                                creds=creds,
                                                updated_str=updated_str,
                                                remaining=remaining,
                                                is_auto_refresh=is_auto_refresh,
                                                db_error=db_error)

              def error_screen(message):
                  return f'''
                  <html><body style="text-align:center;padding:40px;font-family:sans-serif;">
                  <h1 style="color:red;">現在、在庫情報を取得できません</h1>
                  <p>{message}</p>
                  <p style="color:#888;">自動更新がOFFの場合、一定時間で接続が無効になることがあります。</p>
                  <form action="/toggle" method="post">
                      <button type="submit">自動更新をONにする</button>
                  </form>
                  </body></html>
                  '''

              @app.route("/transit", methods=["GET", "POST"])
              def transit_demo():
                  VAULT_ADDR = "http://vault:8200"
                  VAULT_TOKEN = "root"
                  KEY_NAME = "my-transit-key"

                  encrypt_input = decrypt_input = ""
                  ciphertext = plaintext = ""
                  encrypt_curl = decrypt_curl = ""

                  if request.method == "POST":
                      mode = request.form.get("mode")

                      if mode == "encrypt":
                          encrypt_input = request.form["encrypt_input"]
                          b64 = encrypt_input.encode("utf-8").hex()
                          res = requests.post(
                              f"{VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}",
                              headers={"X-Vault-Token": VAULT_TOKEN},
                              json={"plaintext": b64}
                          ).json()
                          ciphertext = res["data"]["ciphertext"]
                          encrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"plaintext\":\"{b64}\"}}' {VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}"

                      elif mode == "decrypt":
                          decrypt_input = request.form["decrypt_input"]
                          res = requests.post(
                              f"{VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}",
                              headers={"X-Vault-Token": VAULT_TOKEN},
                              json={"ciphertext": decrypt_input}
                          ).json()
                          dec = res["data"]["plaintext"]
                          plaintext = bytes.fromhex(dec).decode("utf-8")
                          decrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"ciphertext\":\"{decrypt_input}\"}}' {VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}"

                  return f"""
                  <html>
                  <head>
                    <style>
                      body {{ font-family: Arial; }}
                      .container {{ display: flex; gap: 40px; }}
                      .box {{ flex: 1; border: 1px solid #ccc; padding: 20px; }}
                      input, textarea {{ width: 100%; margin-top: 8px; }}
                      textarea {{ height: 100px; }}
                    </style>
                  </head>
                  <body>
                    <h2>🔐 Vault Transit Engine Demo</h2>
                    <a href="/">⬅ DB Secret デモへ戻る</a>
                    <div class="container">
                      <div class="box">
                        <h3>📝 暗号化</h3>
                        <form method="post">
                          <input type="hidden" name="mode" value="encrypt" />
                          <label>平文:</label><br>
                          <input name="encrypt_input" value="{encrypt_input}" /><br><br>
                          <button type="submit">🔒 暗号化</button>
                        </form>
                        {"<h4>暗号化結果:</h4><textarea readonly>" + ciphertext + "</textarea>" if ciphertext else ""}
                        {"<h4>curl:</h4><textarea readonly>" + encrypt_curl + "</textarea>" if encrypt_curl else ""}
                      </div>
                      <div class="box">
                        <h3>🔓 復号化</h3>
                        <form method="post">
                          <input type="hidden" name="mode" value="decrypt" />
                          <label>暗号文:</label><br>
                          <textarea name="decrypt_input">{decrypt_input}</textarea><br>
                          <button type="submit">🔓 復号化</button>
                        </form>
                        {"<h4>復号結果:</h4><textarea readonly>" + plaintext + "</textarea>" if plaintext else ""}
                        {"<h4>curl:</h4><textarea readonly>" + decrypt_curl + "</textarea>" if decrypt_curl else ""}
                      </div>
                    </div>
                  </body>
                  </html>
                  """

              if __name__ == "__main__":
                  app.run(host="0.0.0.0", port=5000)
              EOF

              python app.py
          command: ["/bin/sh", "-c"]
          image: python:3.11-slim
          name: app
          ports:
            - containerPort: 5000
          volumeMounts:
            - mountPath: /etc/tls
              name: tls-certs
              readOnly: true
      serviceAccountName: vault
      volumes:
        - emptyDir: {}
          name: tls-certs

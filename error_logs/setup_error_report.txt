======= [Vault Helm Release Status] =======
NAME 	NAMESPACE	REVISION	UPDATED                                	STATUS  	CHART       	APP VERSION
vault	default  	1       	2025-07-03 18:44:36.822817062 +0900 JST	deployed	vault-0.30.0	1.19.0     
======= [Vault Pods] =======
NAME                                    READY   STATUS             RESTARTS      AGE     IP             NODE       NOMINATED NODE   READINESS GATES
demo-app-5bbb7454c4-vggzf               0/2     Init:0/1           0             2m6s    10.244.1.130   minikube   <none>           <none>
nginx-tls-5b74c74f46-rd5ss              1/2     CrashLoopBackOff   4 (7s ago)    2m5s    10.244.1.131   minikube   <none>           <none>
postgres-b85d56587-t9czm                1/1     Running            0             2m11s   10.244.1.127   minikube   <none>           <none>
postgres-init-p4jfq                     0/1     Completed          2             2m8s    10.244.1.129   minikube   <none>           <none>
vault-0                                 0/1     CrashLoopBackOff   4 (33s ago)   2m24s   10.244.1.126   minikube   <none>           <none>
vault-agent-injector-75f9dfc9c8-pmwrk   1/1     Running            0             2m24s   10.244.1.125   minikube   <none>           <none>
vault-init-7d7lx                        0/1     CrashLoopBackOff   4 (26s ago)   2m10s   10.244.1.128   minikube   <none>           <none>
======= [Vault Injector Logs] =======
2025-07-03T09:44:41.802Z [INFO]  handler.auto-tls: Generated CA
2025-07-03T09:44:41.876Z [INFO]  handler: Starting handler..
Listening on ":8080"...
2025-07-03T09:44:41.896Z [INFO]  handler.certwatcher: Updated certificate bundle received. Updating certs...
2025-07-03T09:44:51.716Z [INFO]  handler: Request received: Method=POST URL=/mutate?timeout=30s
2025-07-03T09:44:52.951Z [INFO]  handler: Request received: Method=POST URL=/mutate?timeout=30s
2025-07-03T09:44:54.085Z [INFO]  handler: Request received: Method=POST URL=/mutate?timeout=30s
2025-07-03T09:44:56.401Z [INFO]  handler: Request received: Method=POST URL=/mutate?timeout=30s
2025-07-03T09:44:57.722Z [INFO]  handler: Request received: Method=POST URL=/mutate?timeout=30s
======= [Vault Init Job Logs] =======
Error enabling kubernetes auth: Post "http://vault.default.svc:8200/v1/sys/auth/kubernetes": dial tcp 10.111.236.29:8200: connect: connection refused
Error writing data to auth/kubernetes/config: Put "http://vault.default.svc:8200/v1/auth/kubernetes/config": dial tcp 10.111.236.29:8200: connect: connection refused
======= [App Logs] =======
Error from server (BadRequest): container "app" in pod "demo-app-5bbb7454c4-vggzf" is waiting to start: PodInitializing
app logs failed
======= [Describe All Resources] =======
Name:             demo-app-5bbb7454c4-vggzf
Namespace:        default
Priority:         0
Service Account:  vault
Node:             minikube/192.168.49.2
Start Time:       Thu, 03 Jul 2025 18:44:57 +0900
Labels:           app=demo-app
                  pod-template-hash=5bbb7454c4
Annotations:      vault.hashicorp.com/agent-init-first: true
                  vault.hashicorp.com/agent-inject: true
                  vault.hashicorp.com/agent-inject-secret-db-creds: database/creds/readonly-role
                  vault.hashicorp.com/agent-inject-status: injected
                  vault.hashicorp.com/agent-inject-template-db-creds:
                    {{- with secret "database/creds/readonly-role" -}}
                    DB_USER={{ .Data.username }}
                    DB_PASSWORD={{ .Data.password }}
                    {{- end }}
                  vault.hashicorp.com/agent-pre-populate: true
                  vault.hashicorp.com/role: myapp-role
Status:           Pending
IP:               10.244.1.130
IPs:
  IP:           10.244.1.130
Controlled By:  ReplicaSet/demo-app-5bbb7454c4
Init Containers:
  vault-agent-init:
    Container ID:  docker://1bf111c0126c70e3ed14f103600e76164144d03cf2a330083d5eb8afa9f0bac5
    Image:         hashicorp/vault:1.19.0
    Image ID:      docker-pullable://hashicorp/vault@sha256:bbb7f98dc67d9ebdda1256de288df1cb9a5450990e48338043690bee3b332c90
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/sh
      -ec
    Args:
      echo ${VAULT_CONFIG?} | base64 -d > /home/vault/config.json && vault agent -config=/home/vault/config.json
    State:          Running
      Started:      Thu, 03 Jul 2025 18:45:09 +0900
    Ready:          False
    Restart Count:  0
    Limits:
      cpu:     500m
      memory:  128Mi
    Requests:
      cpu:     250m
      memory:  64Mi
    Environment:
      NAMESPACE:         default (v1:metadata.namespace)
      HOST_IP:            (v1:status.hostIP)
      POD_IP:             (v1:status.podIP)
      VAULT_LOG_LEVEL:   info
      VAULT_LOG_FORMAT:  standard
      VAULT_CONFIG:      eyJhdXRvX2F1dGgiOnsibWV0aG9kIjp7InR5cGUiOiJrdWJlcm5ldGVzIiwibW91bnRfcGF0aCI6ImF1dGgva3ViZXJuZXRlcyIsImNvbmZpZyI6eyJyb2xlIjoibXlhcHAtcm9sZSIsInRva2VuX3BhdGgiOiIvdmFyL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvdG9rZW4ifX0sInNpbmsiOlt7InR5cGUiOiJmaWxlIiwiY29uZmlnIjp7InBhdGgiOiIvaG9tZS92YXVsdC8udmF1bHQtdG9rZW4ifX1dfSwiZXhpdF9hZnRlcl9hdXRoIjp0cnVlLCJwaWRfZmlsZSI6Ii9ob21lL3ZhdWx0Ly5waWQiLCJ2YXVsdCI6eyJhZGRyZXNzIjoiaHR0cDovL3ZhdWx0LmRlZmF1bHQuc3ZjOjgyMDAifSwidGVtcGxhdGUiOlt7ImRlc3RpbmF0aW9uIjoiL3ZhdWx0L3NlY3JldHMvZGItY3JlZHMiLCJjb250ZW50cyI6Int7LSB3aXRoIHNlY3JldCBcImRhdGFiYXNlL2NyZWRzL3JlYWRvbmx5LXJvbGVcIiAtfX1cbkRCX1VTRVI9e3sgLkRhdGEudXNlcm5hbWUgfX1cbkRCX1BBU1NXT1JEPXt7IC5EYXRhLnBhc3N3b3JkIH19XG57ey0gZW5kIH19XG4iLCJsZWZ0X2RlbGltaXRlciI6Int7IiwicmlnaHRfZGVsaW1pdGVyIjoifX0ifV0sInRlbXBsYXRlX2NvbmZpZyI6eyJleGl0X29uX3JldHJ5X2ZhaWx1cmUiOnRydWV9fQ==
    Mounts:
      /home/vault from home-init (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-2fkgp (ro)
      /vault/secrets from vault-secrets (rw)
Containers:
  app:
    Container ID:  
    Image:         python:3.11-slim
    Image ID:      
    Port:          5000/TCP
    Host Port:     0/TCP
    Command:
      /bin/sh
      -c
    Args:
      pip install flask psycopg2-binary requests pyOpenSSL pytz;
      
      cat <<EOF > app.py
      from flask import Flask, request, render_template_string, redirect
      import psycopg2, os, time, datetime, requests, pytz 
      
      app = Flask(__name__)
      is_auto_refresh = True
      initial_creds = {}
      initial_loaded_time = ""
      
      def load_env_file(path):
          creds = {}
          with open(path) as f:
              for line in f:
                  if "=" in line:
                      k, v = line.strip().split("=", 1)
                      creds[k] = v
          return creds
      
      def load_secret(path="/vault/secrets/db-creds"):
          if not os.path.exists(path):
              return None, "シークレットファイルが見つかりません", None
          try:
              creds = load_env_file(path)
              updated = os.path.getmtime(path)
              jst = pytz.timezone("Asia/Tokyo")
              updated_str = datetime.datetime.fromtimestamp(updated, tz=jst).strftime('%Y-%m-%d %H:%M:%S')
              vault_max_ttl = 30
              remaining = max(0, int(vault_max_ttl - (time.time() - updated)))
              return creds, updated_str, remaining
          except Exception as e:
              return None, str(e), None
      
      @app.route("/toggle", methods=["POST"])
      def toggle():
          global is_auto_refresh
          is_auto_refresh = not is_auto_refresh
          return redirect("/")
      
      @app.route("/")
      def index():
          global is_auto_refresh, initial_creds, initial_loaded_time
      
          secret_path = "/vault/secrets/db-creds"
          db_error = False
      
          jst = pytz.timezone("Asia/Tokyo")
      
          if is_auto_refresh:
              creds, updated_str, remaining_secs = load_secret(secret_path)
              if creds is None:
                  return error_screen(updated_str)
              remaining = f"{remaining_secs} 秒"
          else:
              if not initial_creds:
                  initial_creds, initial_loaded_time, _ = load_secret(secret_path)
              creds, updated_str, _ = initial_creds, initial_loaded_time, 0
              remaining = "Secret期限切れまであと少し・・・"
      
          try:
              connection = psycopg2.connect(
                  host="postgres",
                  dbname="inventorydb",
                  user=creds["DB_USER"],
                  password=creds["DB_PASSWORD"]
              )
              cursor = connection.cursor()
              cursor.execute("SELECT name, stock, updated_at FROM inventory")
              items = [{"name": r[0], "stock": r[1], "updated_at": r[2].astimezone(jst).strftime('%Y-%m-%d %H:%M:%S')} for r in cursor.fetchall()]
              cursor.close()
              connection.close()
          except Exception:
              db_error = True
              items = []
      
          html_template = '''
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="UTF-8">
              <meta http-equiv="refresh" content="3">
              <title>在庫管理ダッシュボード</title>
              <style>
                  body { font-family: 'Roboto', sans-serif; background-color: #f0f2f5; padding: 40px; }
                  .cards { display: flex; flex-wrap: wrap; gap: 20px; justify-content: center; }
                  .card {
                      background: {{ "white" if not db_error else "#ffe5e5" }};
                      border-radius: 12px;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                      padding: 20px;
                      width: 280px;
                      border: {{ "none" if not db_error else "2px solid red" }};
                  }
                  .section { margin-top: 40px; text-align: center; }
                  button { font-size: 1em; padding: 10px 20px; margin-bottom: 20px; }
              </style>
          </head>
          <body>
              <a href='/transit'>🔁 Transit デモへ</a>
              <a href='/transform'>🔣 Transform デモへ</a>
              <h1>📦 在庫管理ダッシュボード</h1>
      
              <div style="text-align: center;">
                <form action="/toggle" method="post" style="display: inline-block;">
                  <button type="submit">自動更新: {{ "ON 🔄" if is_auto_refresh else "OFF ⛔" }}</button>
                </form>
              </div>
              <div class="cards">
                  {% if db_error %}
                  <div class="card">
                      <h3 style="color:red;">⚠ 在庫データ取得エラー</h3>
                      <p>資格情報が無効になっている可能性があります。</p>
                      <p style="color:#888;">自動更新をONにしてVault Agentにより資格情報を更新してください。</p>
                  </div>
                  {% else %}
                  {% for item in items %}
                  <div class="card">
                      <h3>{{ item['name'] }}</h3>
                      <div>在庫数: {{ item['stock'] }}</div>
                      <div>更新日: {{ item['updated_at'] }}</div>
                  </div>
                  {% endfor %}
                  {% endif %}
              </div>
              <div class="section">
                  <h2>📂 Secret ファイルの状態</h2>
                  <div style="display: flex; justify-content: center;">
                  <table style="text-align: left;">
                      <tr><th style="padding: 4px 12px;">ファイルパス</th><td>{{ "/vault/secrets/db-creds" }}</td></tr>
                      <tr><th style="padding: 4px 12px;">最終更新日時</th><td>{{ updated_str }}</td></tr>
                      <tr><th style="padding: 4px 12px;">TTL 残り秒数</th><td>{{ remaining }}</td></tr>
                      <tr><th style="padding: 4px 12px;">DB_USER</th><td>{{ creds.get("DB_USER") }}</td></tr>
                      <tr><th style="padding: 4px 12px;">DB_PASSWORD</th><td>{{ creds.get("DB_PASSWORD") }}</td></tr>
                  </table>
                  </div>
              </div>
          </body></html>
          '''
      
          return render_template_string(html_template,
                                        items=items,
                                        creds=creds,
                                        updated_str=updated_str,
                                        remaining=remaining,
                                        is_auto_refresh=is_auto_refresh,
                                        db_error=db_error)
      
      def error_screen(message):
          return f'''
          <html><body style="text-align:center;padding:40px;font-family:sans-serif;">
          <h1 style="color:red;">現在、在庫情報を取得できません</h1>
          <p>{message}</p>
          <p style="color:#888;">自動更新がOFFの場合、一定時間で接続が無効になることがあります。</p>
          <form action="/toggle" method="post">
              <button type="submit">自動更新をONにする</button>
          </form>
          </body></html>
          '''
      
      @app.route("/transit", methods=["GET", "POST"])
      def transit_demo():
          VAULT_ADDR = "http://vault:8200"
          VAULT_TOKEN = "root"
          KEY_NAME = "my-transit-key"
      
          encrypt_input = decrypt_input = ""
          ciphertext = plaintext = ""
          encrypt_curl = decrypt_curl = ""
      
          if request.method == "POST":
              mode = request.form.get("mode")
      
              if mode == "encrypt":
                  encrypt_input = request.form["encrypt_input"]
                  b64 = encrypt_input.encode("utf-8").hex()
                  res = requests.post(
                      f"{VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}",
                      headers={"X-Vault-Token": VAULT_TOKEN},
                      json={"plaintext": b64}
                  ).json()
                  ciphertext = res["data"]["ciphertext"]
                  encrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"plaintext\":\"{b64}\"}}' {VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}"
      
              elif mode == "decrypt":
                  decrypt_input = request.form["decrypt_input"]
                  res = requests.post(
                      f"{VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}",
                      headers={"X-Vault-Token": VAULT_TOKEN},
                      json={"ciphertext": decrypt_input}
                  ).json()
                  dec = res["data"]["plaintext"]
                  plaintext = bytes.fromhex(dec).decode("utf-8")
                  decrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"ciphertext\":\"{decrypt_input}\"}}' {VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}"
      
          return f"""
          <html>
          <head>
            <style>
              body {{ font-family: Arial; }}
              .container {{ display: flex; gap: 40px; }}
              .box {{ flex: 1; border: 1px solid #ccc; padding: 20px; }}
              input, textarea {{ width: 100%; margin-top: 8px; }}
              textarea {{ height: 100px; }}
            </style>
          </head>
          <body>
            <h2>🔐 Vault Transit Engine Demo</h2>
            <a href="/">⬅ DB Secret デモへ戻る</a>
            <div class="container">
              <div class="box">
                <h3>📝 暗号化</h3>
                <form method="post">
                  <input type="hidden" name="mode" value="encrypt" />
                  <label>平文:</label><br>
                  <input name="encrypt_input" value="{encrypt_input}" /><br><br>
                  <button type="submit">🔒 暗号化</button>
                </form>
                {"<h4>暗号化結果:</h4><textarea readonly>" + ciphertext + "</textarea>" if ciphertext else ""}
                {"<h4>curl:</h4><textarea readonly>" + encrypt_curl + "</textarea>" if encrypt_curl else ""}
              </div>
              <div class="box">
                <h3>🔓 復号化</h3>
                <form method="post">
                  <input type="hidden" name="mode" value="decrypt" />
                  <label>暗号文:</label><br>
                  <textarea name="decrypt_input">{decrypt_input}</textarea><br>
                  <button type="submit">🔓 復号化</button>
                </form>
                {"<h4>復号結果:</h4><textarea readonly>" + plaintext + "</textarea>" if plaintext else ""}
                {"<h4>curl:</h4><textarea readonly>" + decrypt_curl + "</textarea>" if decrypt_curl else ""}
              </div>
            </div>
          </body>
          </html>
         """
      
      @app.route("/transform", methods=["GET", "POST"])
      def transform_demo():
        VAULT_ADDR = "http://vault:8200"
        VAULT_TOKEN = "root"
        input_value = ""
        fpe_result = token_result = mask_result = ""
        fpe_curl = token_curl = mask_curl = ""
      
        if request.method == "POST":
          input_value = request.form["input_value"]
          role_map = {
            "fpe": ("fpe-pan-transform", "fpe-pan-role"),
            "token": ("token-ccn", "token-ccn-role"),
            "mask": ("mask-pan", "mask-pan-role"),
          }
      
          for ttype in ["fpe", "token", "mask"]:
            tpl, role = role_map[ttype]
            res = requests.post(
              f"{VAULT_ADDR}/v1/transform/encode/{role}",
              headers={"X-Vault-Token": VAULT_TOKEN},
              json={"value": input_value, "role": role}
            ).json()
            result = res.get("data", {}).get("encoded_value", "")
            curl = f"""curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{"value":"{input_value}","role":"{role}"}}' {VAULT_ADDR}/v1/transform/encode/{role}"""
            if ttype == "fpe":
              fpe_result, fpe_curl = result, curl
            elif ttype == "token":
              token_result, token_curl = result, curl
            elif ttype == "mask":
              mask_result, mask_curl = result, curl
        return f"""
        <html>
        <head>
        <style>
          body {{ font-family: Arial; }}
          .container {{ display: flex; gap: 30px; flex-wrap: wrap; }}
          .box {{ flex: 1; border: 1px solid #ccc; padding: 20px; min-width: 300px; }}
          input, textarea {{ width: 100%; margin-top: 8px; }}
          textarea {{ height: 80px; }}
        </style>
        </head>
        <body>
        <h2>🔣 Vault Transform Engine Demo</h2>
        <a href="/">⬅ 戻る</a> |
        <a href="/transit">🔁 Transit デモへ</a>
        <form method="post">
          <label>変換対象データ:</label><br>
          <input name="input_value" value="{input_value}" /><br><br>
          <button type="submit">🚀 変換を実行</button>
        </form>
        <div class="container">
          <div class="box">
          <h3>🔐 FPE (例: クレジットカード番号)</h3>
          {"<textarea readonly>" + fpe_result + "</textarea>" if fpe_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + fpe_curl + "</textarea>" if fpe_curl else ""}
          </div>
          <div class="box">
          <h3>🔁 Tokenization (例: マイナンバー)</h3>
          {"<textarea readonly>" + token_result + "</textarea>" if token_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + token_curl + "</textarea>" if token_curl else ""}
          </div>
          <div class="box">
          <h3>🔍 Masking 表示</h3>
          {"<textarea readonly>" + mask_result + "</textarea>" if mask_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + mask_curl + "</textarea>" if mask_curl else ""}
          </div>
        </div>
        </body>
        </html>
        """
      
      if __name__ == "__main__":
          app.run(host="0.0.0.0", port=5000)
      EOF
      
      python app.py
      
    State:          Waiting
      Reason:       PodInitializing
    Ready:          False
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /etc/tls from tls-certs (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-2fkgp (ro)
      /vault/secrets from vault-secrets (rw)
  vault-agent:
    Container ID:  
    Image:         hashicorp/vault:1.19.0
    Image ID:      
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/sh
      -ec
    Args:
      echo ${VAULT_CONFIG?} | base64 -d > /home/vault/config.json && vault agent -config=/home/vault/config.json
    State:          Waiting
      Reason:       PodInitializing
    Ready:          False
    Restart Count:  0
    Limits:
      cpu:     500m
      memory:  128Mi
    Requests:
      cpu:     250m
      memory:  64Mi
    Environment:
      NAMESPACE:         default (v1:metadata.namespace)
      HOST_IP:            (v1:status.hostIP)
      POD_IP:             (v1:status.podIP)
      VAULT_LOG_LEVEL:   info
      VAULT_LOG_FORMAT:  standard
      VAULT_CONFIG:      eyJhdXRvX2F1dGgiOnsibWV0aG9kIjp7InR5cGUiOiJrdWJlcm5ldGVzIiwibW91bnRfcGF0aCI6ImF1dGgva3ViZXJuZXRlcyIsImNvbmZpZyI6eyJyb2xlIjoibXlhcHAtcm9sZSIsInRva2VuX3BhdGgiOiIvdmFyL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvdG9rZW4ifX0sInNpbmsiOlt7InR5cGUiOiJmaWxlIiwiY29uZmlnIjp7InBhdGgiOiIvaG9tZS92YXVsdC8udmF1bHQtdG9rZW4ifX1dfSwiZXhpdF9hZnRlcl9hdXRoIjpmYWxzZSwicGlkX2ZpbGUiOiIvaG9tZS92YXVsdC8ucGlkIiwidmF1bHQiOnsiYWRkcmVzcyI6Imh0dHA6Ly92YXVsdC5kZWZhdWx0LnN2Yzo4MjAwIn0sInRlbXBsYXRlIjpbeyJkZXN0aW5hdGlvbiI6Ii92YXVsdC9zZWNyZXRzL2RiLWNyZWRzIiwiY29udGVudHMiOiJ7ey0gd2l0aCBzZWNyZXQgXCJkYXRhYmFzZS9jcmVkcy9yZWFkb25seS1yb2xlXCIgLX19XG5EQl9VU0VSPXt7IC5EYXRhLnVzZXJuYW1lIH19XG5EQl9QQVNTV09SRD17eyAuRGF0YS5wYXNzd29yZCB9fVxue3stIGVuZCB9fVxuIiwibGVmdF9kZWxpbWl0ZXIiOiJ7eyIsInJpZ2h0X2RlbGltaXRlciI6In19In1dLCJ0ZW1wbGF0ZV9jb25maWciOnsiZXhpdF9vbl9yZXRyeV9mYWlsdXJlIjp0cnVlfX0=
    Mounts:
      /home/vault from home-sidecar (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-2fkgp (ro)
      /vault/secrets from vault-secrets (rw)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 False 
  Ready                       False 
  ContainersReady             False 
  PodScheduled                True 
Volumes:
  tls-certs:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
  kube-api-access-2fkgp:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    Optional:                false
    DownwardAPI:             true
  home-init:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     Memory
    SizeLimit:  <unset>
  home-sidecar:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     Memory
    SizeLimit:  <unset>
  vault-secrets:
    Type:        EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:      Memory
    SizeLimit:   <unset>
QoS Class:       Burstable
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  2m12s  default-scheduler  Successfully assigned default/demo-app-5bbb7454c4-vggzf to minikube
  Normal  Pulled     2m3s   kubelet            Container image "hashicorp/vault:1.19.0" already present on machine
  Normal  Created    2m1s   kubelet            Created container: vault-agent-init
  Normal  Started    119s   kubelet            Started container vault-agent-init


Name:             nginx-tls-5b74c74f46-rd5ss
Namespace:        default
Priority:         0
Service Account:  vault
Node:             minikube/192.168.49.2
Start Time:       Thu, 03 Jul 2025 18:44:58 +0900
Labels:           app=nginx-tls
                  pod-template-hash=5b74c74f46
Annotations:      <none>
Status:           Running
IP:               10.244.1.131
IPs:
  IP:           10.244.1.131
Controlled By:  ReplicaSet/nginx-tls-5b74c74f46
Containers:
  nginx:
    Container ID:   docker://24f78f2b9f68c9f5af597311cb0ba1d0d0b7543835545898c728211f35b2ce63
    Image:          nginx:1.25
    Image ID:       docker-pullable://nginx@sha256:a484819eb60211f5299034ac80f6a681b06f89e65866ce91f356ed7c72af059c
    Port:           443/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       CrashLoopBackOff
    Last State:     Terminated
      Reason:       Error
      Exit Code:    1
      Started:      Thu, 03 Jul 2025 18:46:55 +0900
      Finished:     Thu, 03 Jul 2025 18:46:55 +0900
    Ready:          False
    Restart Count:  4
    Environment:    <none>
    Mounts:
      /etc/nginx/conf.d/default.conf from nginx-conf (rw,path="default.conf")
      /etc/nginx/ssl from ssl (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-qm7kp (ro)
  vault-agent:
    Container ID:  docker://fd81cc29361cb7887d035a1ae4a329e1c9fbef6ace2c8298c976f5862613ceca
    Image:         hashicorp/vault:1.15.4
    Image ID:      docker-pullable://hashicorp/vault@sha256:0b01ed3924e613381793de3f5e429ea6b4d9dac28592472f8007315495aba061
    Port:          <none>
    Host Port:     <none>
    Command:
      vault
      agent
      -config=/etc/vault/config/vault-agent-config.hcl
    State:          Running
      Started:      Thu, 03 Jul 2025 18:45:12 +0900
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /etc/nginx/ssl from ssl (rw)
      /etc/vault/config/vault-agent-config.hcl from nginx-conf (rw,path="vault-agent-config.hcl")
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-qm7kp (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       False 
  ContainersReady             False 
  PodScheduled                True 
Volumes:
  ssl:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
  nginx-conf:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      nginx-config
    Optional:  false
  kube-api-access-qm7kp:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    Optional:                false
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason     Age                  From               Message
  ----     ------     ----                 ----               -------
  Normal   Scheduled  2m10s                default-scheduler  Successfully assigned default/nginx-tls-5b74c74f46-rd5ss to minikube
  Normal   Pulled     118s                 kubelet            Container image "hashicorp/vault:1.15.4" already present on machine
  Normal   Created    117s                 kubelet            Created container: vault-agent
  Normal   Started    116s                 kubelet            Started container vault-agent
  Normal   Pulled     15s (x5 over 2m2s)   kubelet            Container image "nginx:1.25" already present on machine
  Normal   Created    14s (x5 over 2m)     kubelet            Created container: nginx
  Normal   Started    14s (x5 over 118s)   kubelet            Started container nginx
  Warning  BackOff    11s (x10 over 110s)  kubelet            Back-off restarting failed container nginx in pod nginx-tls-5b74c74f46-rd5ss_default(423c1d7f-fb2d-41f7-9529-7bffc61a0db6)


Name:             postgres-b85d56587-t9czm
Namespace:        default
Priority:         0
Service Account:  default
Node:             minikube/192.168.49.2
Start Time:       Thu, 03 Jul 2025 18:44:51 +0900
Labels:           app=postgres
                  pod-template-hash=b85d56587
Annotations:      <none>
Status:           Running
IP:               10.244.1.127
IPs:
  IP:           10.244.1.127
Controlled By:  ReplicaSet/postgres-b85d56587
Containers:
  postgres:
    Container ID:   docker://40b3eca2b65267aa8ea4d9c272bca730333873d7d5316f0f23045d85a3c12799
    Image:          postgres:15
    Image ID:       docker-pullable://postgres@sha256:b8e11f8a8b383e19589a086a78b10f9ca69a39d6c9dcdd9342a8697544e8b3a0
    Port:           5432/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Thu, 03 Jul 2025 18:44:55 +0900
    Ready:          True
    Restart Count:  0
    Environment:
      POSTGRES_DB:        inventorydb
      POSTGRES_USER:      vaultadmin
      POSTGRES_PASSWORD:  password
    Mounts:
      /var/lib/postgresql/data from postgres-storage (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-q5sl5 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  postgres-storage:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
  kube-api-access-q5sl5:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    Optional:                false
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  2m17s  default-scheduler  Successfully assigned default/postgres-b85d56587-t9czm to minikube
  Normal  Pulled     2m15s  kubelet            Container image "postgres:15" already present on machine
  Normal  Created    2m14s  kubelet            Created container: postgres
  Normal  Started    2m13s  kubelet            Started container postgres


Name:             postgres-init-p4jfq
Namespace:        default
Priority:         0
Service Account:  default
Node:             minikube/192.168.49.2
Start Time:       Thu, 03 Jul 2025 18:44:54 +0900
Labels:           batch.kubernetes.io/controller-uid=0752bf69-2224-49c5-93ba-98746f0c83ca
                  batch.kubernetes.io/job-name=postgres-init
                  controller-uid=0752bf69-2224-49c5-93ba-98746f0c83ca
                  job-name=postgres-init
Annotations:      <none>
Status:           Succeeded
IP:               10.244.1.129
IPs:
  IP:           10.244.1.129
Controlled By:  Job/postgres-init
Containers:
  psql:
    Container ID:  docker://d5b7683fc25f47d2c1e5ca72ea30d78278e0c4802dabe4d34b5035565e730274
    Image:         postgres:15
    Image ID:      docker-pullable://postgres@sha256:b8e11f8a8b383e19589a086a78b10f9ca69a39d6c9dcdd9342a8697544e8b3a0
    Port:          <none>
    Host Port:     <none>
    Command:
      psql
    Args:
      -U
      vaultadmin
      -d
      inventorydb
      -h
      postgres
      -f
      /sql/init.sql
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Thu, 03 Jul 2025 18:45:33 +0900
      Finished:     Thu, 03 Jul 2025 18:45:34 +0900
    Ready:          False
    Restart Count:  2
    Environment:
      PGPASSWORD:  password
    Mounts:
      /sql from sql-volume (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-pc644 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   False 
  Initialized                 True 
  Ready                       False 
  ContainersReady             False 
  PodScheduled                True 
Volumes:
  sql-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      postgres-init-sql
    Optional:  false
  kube-api-access-pc644:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    Optional:                false
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason     Age                  From               Message
  ----     ------     ----                 ----               -------
  Normal   Scheduled  2m15s                default-scheduler  Successfully assigned default/postgres-init-p4jfq to minikube
  Warning  BackOff    112s (x2 over 113s)  kubelet            Back-off restarting failed container psql in pod postgres-init-p4jfq_default(3a7018a4-21ec-482c-bc4e-48e22a9e93ba)
  Normal   Pulled     98s (x3 over 2m10s)  kubelet            Container image "postgres:15" already present on machine
  Normal   Created    97s (x3 over 2m7s)   kubelet            Created container: psql
  Normal   Started    96s (x3 over 2m4s)   kubelet            Started container psql


Name:             vault-0
Namespace:        default
Priority:         0
Service Account:  vault
Node:             minikube/192.168.49.2
Start Time:       Thu, 03 Jul 2025 18:44:38 +0900
Labels:           app.kubernetes.io/instance=vault
                  app.kubernetes.io/name=vault
                  apps.kubernetes.io/pod-index=0
                  component=server
                  controller-revision-hash=vault-598784c65f
                  helm.sh/chart=vault-0.30.0
                  statefulset.kubernetes.io/pod-name=vault-0
Annotations:      <none>
Status:           Running
IP:               10.244.1.126
IPs:
  IP:           10.244.1.126
Controlled By:  StatefulSet/vault
Containers:
  vault:
    Container ID:  docker://1577465f8796a14331dfe2f32c3199edda8c0e8ebe3787229dfab83e5bc1d080
    Image:         hashicorp/vault-enterprise:1.19.5-ent
    Image ID:      docker-pullable://hashicorp/vault-enterprise@sha256:56aec1feea6f8374594281e2099324b5215a2e7bf91ceeb1f4551a111376bfce
    Ports:         8200/TCP, 8201/TCP, 8202/TCP
    Host Ports:    0/TCP, 0/TCP, 0/TCP
    Command:
      /bin/sh
      -ec
    Args:
      /usr/local/bin/docker-entrypoint.sh vault server -dev 
      
    State:          Waiting
      Reason:       CrashLoopBackOff
    Last State:     Terminated
      Reason:       Error
      Exit Code:    1
      Started:      Thu, 03 Jul 2025 18:46:26 +0900
      Finished:     Thu, 03 Jul 2025 18:46:29 +0900
    Ready:          False
    Restart Count:  4
    Readiness:      exec [/bin/sh -ec vault status -tls-skip-verify] delay=5s timeout=3s period=5s #success=1 #failure=2
    Environment:
      HOST_IP:                    (v1:status.hostIP)
      POD_IP:                     (v1:status.podIP)
      VAULT_K8S_POD_NAME:        vault-0 (v1:metadata.name)
      VAULT_K8S_NAMESPACE:       default (v1:metadata.namespace)
      VAULT_ADDR:                http://127.0.0.1:8200
      VAULT_API_ADDR:            http://$(POD_IP):8200
      SKIP_CHOWN:                true
      SKIP_SETCAP:               true
      HOSTNAME:                  vault-0 (v1:metadata.name)
      VAULT_CLUSTER_ADDR:        https://$(HOSTNAME).vault-internal:8201
      HOME:                      /home/vault
      VAULT_LICENSE_PATH:        /vault/license/vault.hclic
      VAULT_DEV_ROOT_TOKEN_ID:   root
      VAULT_DEV_LISTEN_ADDRESS:  [::]:8200
      VAULT_DEV_ROOT_TOKEN_ID:   root
      VAULT_LICENSE:             
    Mounts:
      /home/vault from home (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-qcxjr (ro)
      /vault/license from vault-license (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       False 
  ContainersReady             False 
  PodScheduled                True 
Volumes:
  vault-license:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  vault-enterprise-license
    Optional:    false
  home:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
  kube-api-access-qcxjr:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    Optional:                false
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason     Age                  From               Message
  ----     ------     ----                 ----               -------
  Normal   Scheduled  2m30s                default-scheduler  Successfully assigned default/vault-0 to minikube
  Normal   Pulled     44s (x5 over 2m28s)  kubelet            Container image "hashicorp/vault-enterprise:1.19.5-ent" already present on machine
  Normal   Created    43s (x5 over 2m28s)  kubelet            Created container: vault
  Normal   Started    42s (x5 over 2m28s)  kubelet            Started container vault
  Warning  BackOff    5s (x14 over 2m24s)  kubelet            Back-off restarting failed container vault in pod vault-0_default(1208bf61-7b0a-4f4b-827c-574041b81074)


Name:             vault-agent-injector-75f9dfc9c8-pmwrk
Namespace:        default
Priority:         0
Service Account:  vault-agent-injector
Node:             minikube/192.168.49.2
Start Time:       Thu, 03 Jul 2025 18:44:38 +0900
Labels:           app.kubernetes.io/instance=vault
                  app.kubernetes.io/name=vault-agent-injector
                  component=webhook
                  pod-template-hash=75f9dfc9c8
Annotations:      <none>
Status:           Running
IP:               10.244.1.125
IPs:
  IP:           10.244.1.125
Controlled By:  ReplicaSet/vault-agent-injector-75f9dfc9c8
Containers:
  sidecar-injector:
    Container ID:  docker://78b8fd2ba9012a97762b9178da4a9bbe053c217fede1b16f434fa3f5f5fa4868
    Image:         hashicorp/vault-k8s:1.6.2
    Image ID:      docker-pullable://hashicorp/vault-k8s@sha256:103a2d817a7474a8b678d830b0d6ed2d570cc878e4bc8c146d8d35ec436a8d49
    Port:          <none>
    Host Port:     <none>
    Args:
      agent-inject
      2>&1
    State:          Running
      Started:      Thu, 03 Jul 2025 18:44:41 +0900
    Ready:          True
    Restart Count:  0
    Liveness:       http-get https://:8080/health/ready delay=5s timeout=5s period=2s #success=1 #failure=2
    Readiness:      http-get https://:8080/health/ready delay=5s timeout=5s period=2s #success=1 #failure=2
    Startup:        http-get https://:8080/health/ready delay=5s timeout=5s period=5s #success=1 #failure=12
    Environment:
      AGENT_INJECT_LISTEN:                                 :8080
      AGENT_INJECT_LOG_LEVEL:                              info
      AGENT_INJECT_VAULT_ADDR:                             http://vault.default.svc:8200
      AGENT_INJECT_VAULT_AUTH_PATH:                        auth/kubernetes
      AGENT_INJECT_VAULT_IMAGE:                            hashicorp/vault:1.19.0
      AGENT_INJECT_TLS_AUTO:                               vault-agent-injector-cfg
      AGENT_INJECT_TLS_AUTO_HOSTS:                         vault-agent-injector-svc,vault-agent-injector-svc.default,vault-agent-injector-svc.default.svc
      AGENT_INJECT_LOG_FORMAT:                             standard
      AGENT_INJECT_REVOKE_ON_SHUTDOWN:                     false
      AGENT_INJECT_CPU_REQUEST:                            250m
      AGENT_INJECT_CPU_LIMIT:                              500m
      AGENT_INJECT_MEM_REQUEST:                            64Mi
      AGENT_INJECT_MEM_LIMIT:                              128Mi
      AGENT_INJECT_DEFAULT_TEMPLATE:                       map
      AGENT_INJECT_TEMPLATE_CONFIG_EXIT_ON_RETRY_FAILURE:  true
      POD_NAME:                                            vault-agent-injector-75f9dfc9c8-pmwrk (v1:metadata.name)
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-jq8d9 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-jq8d9:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    Optional:                false
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  2m31s  default-scheduler  Successfully assigned default/vault-agent-injector-75f9dfc9c8-pmwrk to minikube
  Normal  Pulled     2m28s  kubelet            Container image "hashicorp/vault-k8s:1.6.2" already present on machine
  Normal  Started    2m28s  kubelet            Started container sidecar-injector
  Normal  Created    2m28s  kubelet            Created container: sidecar-injector


Name:             vault-init-7d7lx
Namespace:        default
Priority:         0
Service Account:  vault
Node:             minikube/192.168.49.2
Start Time:       Thu, 03 Jul 2025 18:44:53 +0900
Labels:           batch.kubernetes.io/controller-uid=af9e4924-abf6-447f-86de-be758d21edf3
                  batch.kubernetes.io/job-name=vault-init
                  controller-uid=af9e4924-abf6-447f-86de-be758d21edf3
                  job-name=vault-init
Annotations:      <none>
Status:           Running
IP:               10.244.1.128
IPs:
  IP:           10.244.1.128
Controlled By:  Job/vault-init
Containers:
  vault-init:
    Container ID:  docker://b614d72c415ca4c86d490889164c8555821815a3ea2ccf950dc8b40d75d8359a
    Image:         hashicorp/vault:1.15.4
    Image ID:      docker-pullable://hashicorp/vault@sha256:0b01ed3924e613381793de3f5e429ea6b4d9dac28592472f8007315495aba061
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/sh
      -c
    Args:
      set -e
      export VAULT_ADDR=http://vault.default.svc:8200
      
      # Kubernetes Auth
      vault auth enable kubernetes || true
      vault write auth/kubernetes/config \
        token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        kubernetes_host="https://${KUBERNETES_PORT_443_TCP_ADDR}:443" \
        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      echo 'path "database/creds/readonly-role" { capabilities = ["read"] }' > /tmp/myapp-policy.hcl
      vault policy write myapp-policy /tmp/myapp-policy.hcl
      vault write auth/kubernetes/role/myapp-role \
        bound_service_account_names=vault \
        bound_service_account_namespaces=default \
        policies=myapp-policy \
        ttl=1h
      echo 'path "pki-int/issue/nginx" { capabilities = ["update"] }' > /tmp/nginx-policy.hcl
      vault policy write nginx-policy /tmp/nginx-policy.hcl
      vault write auth/kubernetes/role/nginx-role \
        bound_service_account_names=vault \
        bound_service_account_namespaces=default \
        policies=nginx-policy \
        ttl=1h
      
      # Database
      vault secrets enable database || true
      vault write database/config/my-postgres-db \
        plugin_name=postgresql-database-plugin \
        allowed_roles=readonly-role \
        connection_url="postgresql://{{username}}:{{password}}@postgres:5432/inventorydb?sslmode=disable" \
        username="vaultadmin" \
        password="password"
      vault write database/roles/readonly-role \
        db_name=my-postgres-db \
        default_ttl="5" \
        max_ttl="30" \
        creation_statements=@/tmp/sql/readonly/readonly-role.sql
      
      # Transit
      vault secrets enable -path=transit transit || true
      vault write -f transit/keys/my-transit-key
      
      # PKI: Root
      echo "Enable Root PKI"
      vault secrets enable -path=pki-root pki || true
      vault write pki-root/root/generate/internal \
        common_name="Root CA" \
        ttl=87600h
      
      # PKI: Intermediate
      echo "Enable Intermediate PKI"
      vault secrets enable -path=pki-int pki || true
      vault write -format=json pki-int/intermediate/generate/internal \
        common_name="nginx Intermediate CA" \
        ttl=43800h > /tmp/intermediate-csr.json
      
      CSR=$(cat /tmp/intermediate-csr.json | grep '"csr"' | cut -d '"' -f4)
      printf "%b\n" "$CSR" > /tmp/intermediate.csr.pem
      
      echo "Sign Intermediate CSR with Root"
      vault write -format=json pki-root/root/sign-intermediate \
        csr=@/tmp/intermediate.csr.pem \
        format=pem ttl=43800h > /tmp/intermediate-cert.json
      
      CERT=$(cat /tmp/intermediate-cert.json | grep '"certificate"' | cut -d '"' -f4)
      printf "%b\n" "$CERT" > /tmp/intermediate.cert.pem
      
      # 🔁 修正ポイント: Root証明書を取得してbundle作成
      vault read -field=certificate pki-root/cert/ca > /tmp/root.cert.pem
      cat /tmp/intermediate.cert.pem /tmp/root.cert.pem > /tmp/intermediate-bundle.cert.pem
      
      echo "Set signed intermediate certificate"
      vault write pki-int/intermediate/set-signed \
        certificate=@/tmp/intermediate-bundle.cert.pem
      
      echo "Set issuing/CRL URLs"
      vault write pki-int/config/urls \
        issuing_certificates="$VAULT_ADDR/v1/pki-int/ca" \
        crl_distribution_points="$VAULT_ADDR/v1/pki-int/crl"
      
      echo "Create Role"
      vault write pki-int/roles/nginx \
        allowed_domains="nginx.example.com" \
        allow_subdomains=true \
        allow_bare_domains=true \
        max_ttl="72h"
      
      echo "Vault PKI Init Complete"
      
      echo "Enable Transform engine"
      vault secrets enable transform || true
      
      echo "Configure FPE for PAN"
       vault write transform/transformation/fpe-pan-transform \
        type=fpe \
        template="builtin/creditcardnumber" \
        allowed_roles="fpe-pan-role" \
        tweak_source="internal"
      
      vault write transform/role/fpe-pan-role \
        transformations=fpe-pan-transform
      
      echo "Configure Tokenization for Credit Card Number Format"
       vault write transform/transformations/tokenization/token-ccn \
        max_ttl=24h \
        allowed_roles=token-ccn-role
      
      vault write transform/role/token-ccn-role \
        transformations=token-ccn
      
      ## Masking for PAN display
      echo "Configure Masking for PAN"
      vault write transform/transformation/mask-pan \
        type=masking \
        template="builtin/creditcardnumber" \
        masking_character="*" \
        allowed_roles=mask-pan-role
      
      vault write transform/role/mask-pan-role \
        transformations=mask-pan
      
      echo "✅ Vault Transform configuration complete"
      
    State:          Waiting
      Reason:       CrashLoopBackOff
    Last State:     Terminated
      Reason:       Error
      Exit Code:    2
      Started:      Thu, 03 Jul 2025 18:46:35 +0900
      Finished:     Thu, 03 Jul 2025 18:46:36 +0900
    Ready:          False
    Restart Count:  4
    Environment:
      VAULT_TOKEN:  root
    Mounts:
      /tmp/sql/init from init-sql-volume (rw)
      /tmp/sql/readonly from readonly-role-volume (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rpksp (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       False 
  ContainersReady             False 
  PodScheduled                True 
Volumes:
  init-sql-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      postgres-init-sql
    Optional:  false
  readonly-role-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      readonly-role-sql
    Optional:  false
  kube-api-access-rpksp:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    Optional:                false
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type     Reason     Age                  From               Message
  ----     ------     ----                 ----               -------
  Normal   Scheduled  2m16s                default-scheduler  Successfully assigned default/vault-init-7d7lx to minikube
  Normal   Pulled     35s (x5 over 2m13s)  kubelet            Container image "hashicorp/vault:1.15.4" already present on machine
  Normal   Created    34s (x5 over 2m12s)  kubelet            Created container: vault-init
  Normal   Started    34s (x5 over 2m9s)   kubelet            Started container vault-init
  Warning  BackOff    10s (x11 over 114s)  kubelet            Back-off restarting failed container vault-init in pod vault-init-7d7lx_default(57f04059-8549-4f4b-9a21-a88ed71bbfd4)


Name:                     demo-app
Namespace:                default
Labels:                   app=demo-app
Annotations:              <none>
Selector:                 app=demo-app
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.101.127.151
IPs:                      10.101.127.151
Port:                     <unset>  5000/TCP
TargetPort:               5000/TCP
Endpoints:                
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     kubernetes
Namespace:                default
Labels:                   component=apiserver
                          provider=kubernetes
Annotations:              <none>
Selector:                 <none>
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.96.0.1
IPs:                      10.96.0.1
Port:                     https  443/TCP
TargetPort:               8443/TCP
Endpoints:                192.168.49.2:8443
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     nginx-tls
Namespace:                default
Labels:                   app=nginx-tls
Annotations:              <none>
Selector:                 app=nginx-tls
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.107.168.200
IPs:                      10.107.168.200
Port:                     <unset>  443/TCP
TargetPort:               443/TCP
NodePort:                 <unset>  30443/TCP
Endpoints:                
Session Affinity:         None
External Traffic Policy:  Cluster
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     postgres
Namespace:                default
Labels:                   app=postgres
Annotations:              <none>
Selector:                 app=postgres
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.96.193.93
IPs:                      10.96.193.93
Port:                     <unset>  5432/TCP
TargetPort:               5432/TCP
Endpoints:                10.244.1.127:5432
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     vault
Namespace:                default
Labels:                   app.kubernetes.io/instance=vault
                          app.kubernetes.io/managed-by=Helm
                          app.kubernetes.io/name=vault
                          helm.sh/chart=vault-0.30.0
Annotations:              meta.helm.sh/release-name: vault
                          meta.helm.sh/release-namespace: default
Selector:                 app.kubernetes.io/instance=vault,app.kubernetes.io/name=vault,component=server
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.111.236.29
IPs:                      10.111.236.29
Port:                     http  8200/TCP
TargetPort:               8200/TCP
Endpoints:                10.244.1.126:8200
Port:                     https-internal  8201/TCP
TargetPort:               8201/TCP
Endpoints:                10.244.1.126:8201
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     vault-agent-injector-svc
Namespace:                default
Labels:                   app.kubernetes.io/instance=vault
                          app.kubernetes.io/managed-by=Helm
                          app.kubernetes.io/name=vault-agent-injector
Annotations:              meta.helm.sh/release-name: vault
                          meta.helm.sh/release-namespace: default
Selector:                 app.kubernetes.io/instance=vault,app.kubernetes.io/name=vault-agent-injector,component=webhook
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.96.135.123
IPs:                      10.96.135.123
Port:                     https  443/TCP
TargetPort:               8080/TCP
Endpoints:                10.244.1.125:8080
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     vault-internal
Namespace:                default
Labels:                   app.kubernetes.io/instance=vault
                          app.kubernetes.io/managed-by=Helm
                          app.kubernetes.io/name=vault
                          helm.sh/chart=vault-0.30.0
                          vault-internal=true
Annotations:              meta.helm.sh/release-name: vault
                          meta.helm.sh/release-namespace: default
Selector:                 app.kubernetes.io/instance=vault,app.kubernetes.io/name=vault,component=server
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       None
IPs:                      None
Port:                     http  8200/TCP
TargetPort:               8200/TCP
Endpoints:                10.244.1.126:8200
Port:                     https-internal  8201/TCP
TargetPort:               8201/TCP
Endpoints:                10.244.1.126:8201
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                   demo-app
Namespace:              default
CreationTimestamp:      Thu, 03 Jul 2025 18:44:56 +0900
Labels:                 app=demo-app
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=demo-app
Replicas:               1 desired | 1 updated | 1 total | 0 available | 1 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app=demo-app
  Annotations:      vault.hashicorp.com/agent-init-first: true
                    vault.hashicorp.com/agent-inject: true
                    vault.hashicorp.com/agent-inject-secret-db-creds: database/creds/readonly-role
                    vault.hashicorp.com/agent-inject-template-db-creds:
                      {{- with secret "database/creds/readonly-role" -}}
                      DB_USER={{ .Data.username }}
                      DB_PASSWORD={{ .Data.password }}
                      {{- end }}
                    vault.hashicorp.com/agent-pre-populate: true
                    vault.hashicorp.com/role: myapp-role
  Service Account:  vault
  Containers:
   app:
    Image:      python:3.11-slim
    Port:       5000/TCP
    Host Port:  0/TCP
    Command:
      /bin/sh
      -c
    Args:
      pip install flask psycopg2-binary requests pyOpenSSL pytz;
      
      cat <<EOF > app.py
      from flask import Flask, request, render_template_string, redirect
      import psycopg2, os, time, datetime, requests, pytz 
      
      app = Flask(__name__)
      is_auto_refresh = True
      initial_creds = {}
      initial_loaded_time = ""
      
      def load_env_file(path):
          creds = {}
          with open(path) as f:
              for line in f:
                  if "=" in line:
                      k, v = line.strip().split("=", 1)
                      creds[k] = v
          return creds
      
      def load_secret(path="/vault/secrets/db-creds"):
          if not os.path.exists(path):
              return None, "シークレットファイルが見つかりません", None
          try:
              creds = load_env_file(path)
              updated = os.path.getmtime(path)
              jst = pytz.timezone("Asia/Tokyo")
              updated_str = datetime.datetime.fromtimestamp(updated, tz=jst).strftime('%Y-%m-%d %H:%M:%S')
              vault_max_ttl = 30
              remaining = max(0, int(vault_max_ttl - (time.time() - updated)))
              return creds, updated_str, remaining
          except Exception as e:
              return None, str(e), None
      
      @app.route("/toggle", methods=["POST"])
      def toggle():
          global is_auto_refresh
          is_auto_refresh = not is_auto_refresh
          return redirect("/")
      
      @app.route("/")
      def index():
          global is_auto_refresh, initial_creds, initial_loaded_time
      
          secret_path = "/vault/secrets/db-creds"
          db_error = False
      
          jst = pytz.timezone("Asia/Tokyo")
      
          if is_auto_refresh:
              creds, updated_str, remaining_secs = load_secret(secret_path)
              if creds is None:
                  return error_screen(updated_str)
              remaining = f"{remaining_secs} 秒"
          else:
              if not initial_creds:
                  initial_creds, initial_loaded_time, _ = load_secret(secret_path)
              creds, updated_str, _ = initial_creds, initial_loaded_time, 0
              remaining = "Secret期限切れまであと少し・・・"
      
          try:
              connection = psycopg2.connect(
                  host="postgres",
                  dbname="inventorydb",
                  user=creds["DB_USER"],
                  password=creds["DB_PASSWORD"]
              )
              cursor = connection.cursor()
              cursor.execute("SELECT name, stock, updated_at FROM inventory")
              items = [{"name": r[0], "stock": r[1], "updated_at": r[2].astimezone(jst).strftime('%Y-%m-%d %H:%M:%S')} for r in cursor.fetchall()]
              cursor.close()
              connection.close()
          except Exception:
              db_error = True
              items = []
      
          html_template = '''
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="UTF-8">
              <meta http-equiv="refresh" content="3">
              <title>在庫管理ダッシュボード</title>
              <style>
                  body { font-family: 'Roboto', sans-serif; background-color: #f0f2f5; padding: 40px; }
                  .cards { display: flex; flex-wrap: wrap; gap: 20px; justify-content: center; }
                  .card {
                      background: {{ "white" if not db_error else "#ffe5e5" }};
                      border-radius: 12px;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                      padding: 20px;
                      width: 280px;
                      border: {{ "none" if not db_error else "2px solid red" }};
                  }
                  .section { margin-top: 40px; text-align: center; }
                  button { font-size: 1em; padding: 10px 20px; margin-bottom: 20px; }
              </style>
          </head>
          <body>
              <a href='/transit'>🔁 Transit デモへ</a>
              <a href='/transform'>🔣 Transform デモへ</a>
              <h1>📦 在庫管理ダッシュボード</h1>
      
              <div style="text-align: center;">
                <form action="/toggle" method="post" style="display: inline-block;">
                  <button type="submit">自動更新: {{ "ON 🔄" if is_auto_refresh else "OFF ⛔" }}</button>
                </form>
              </div>
              <div class="cards">
                  {% if db_error %}
                  <div class="card">
                      <h3 style="color:red;">⚠ 在庫データ取得エラー</h3>
                      <p>資格情報が無効になっている可能性があります。</p>
                      <p style="color:#888;">自動更新をONにしてVault Agentにより資格情報を更新してください。</p>
                  </div>
                  {% else %}
                  {% for item in items %}
                  <div class="card">
                      <h3>{{ item['name'] }}</h3>
                      <div>在庫数: {{ item['stock'] }}</div>
                      <div>更新日: {{ item['updated_at'] }}</div>
                  </div>
                  {% endfor %}
                  {% endif %}
              </div>
              <div class="section">
                  <h2>📂 Secret ファイルの状態</h2>
                  <div style="display: flex; justify-content: center;">
                  <table style="text-align: left;">
                      <tr><th style="padding: 4px 12px;">ファイルパス</th><td>{{ "/vault/secrets/db-creds" }}</td></tr>
                      <tr><th style="padding: 4px 12px;">最終更新日時</th><td>{{ updated_str }}</td></tr>
                      <tr><th style="padding: 4px 12px;">TTL 残り秒数</th><td>{{ remaining }}</td></tr>
                      <tr><th style="padding: 4px 12px;">DB_USER</th><td>{{ creds.get("DB_USER") }}</td></tr>
                      <tr><th style="padding: 4px 12px;">DB_PASSWORD</th><td>{{ creds.get("DB_PASSWORD") }}</td></tr>
                  </table>
                  </div>
              </div>
          </body></html>
          '''
      
          return render_template_string(html_template,
                                        items=items,
                                        creds=creds,
                                        updated_str=updated_str,
                                        remaining=remaining,
                                        is_auto_refresh=is_auto_refresh,
                                        db_error=db_error)
      
      def error_screen(message):
          return f'''
          <html><body style="text-align:center;padding:40px;font-family:sans-serif;">
          <h1 style="color:red;">現在、在庫情報を取得できません</h1>
          <p>{message}</p>
          <p style="color:#888;">自動更新がOFFの場合、一定時間で接続が無効になることがあります。</p>
          <form action="/toggle" method="post">
              <button type="submit">自動更新をONにする</button>
          </form>
          </body></html>
          '''
      
      @app.route("/transit", methods=["GET", "POST"])
      def transit_demo():
          VAULT_ADDR = "http://vault:8200"
          VAULT_TOKEN = "root"
          KEY_NAME = "my-transit-key"
      
          encrypt_input = decrypt_input = ""
          ciphertext = plaintext = ""
          encrypt_curl = decrypt_curl = ""
      
          if request.method == "POST":
              mode = request.form.get("mode")
      
              if mode == "encrypt":
                  encrypt_input = request.form["encrypt_input"]
                  b64 = encrypt_input.encode("utf-8").hex()
                  res = requests.post(
                      f"{VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}",
                      headers={"X-Vault-Token": VAULT_TOKEN},
                      json={"plaintext": b64}
                  ).json()
                  ciphertext = res["data"]["ciphertext"]
                  encrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"plaintext\":\"{b64}\"}}' {VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}"
      
              elif mode == "decrypt":
                  decrypt_input = request.form["decrypt_input"]
                  res = requests.post(
                      f"{VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}",
                      headers={"X-Vault-Token": VAULT_TOKEN},
                      json={"ciphertext": decrypt_input}
                  ).json()
                  dec = res["data"]["plaintext"]
                  plaintext = bytes.fromhex(dec).decode("utf-8")
                  decrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"ciphertext\":\"{decrypt_input}\"}}' {VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}"
      
          return f"""
          <html>
          <head>
            <style>
              body {{ font-family: Arial; }}
              .container {{ display: flex; gap: 40px; }}
              .box {{ flex: 1; border: 1px solid #ccc; padding: 20px; }}
              input, textarea {{ width: 100%; margin-top: 8px; }}
              textarea {{ height: 100px; }}
            </style>
          </head>
          <body>
            <h2>🔐 Vault Transit Engine Demo</h2>
            <a href="/">⬅ DB Secret デモへ戻る</a>
            <div class="container">
              <div class="box">
                <h3>📝 暗号化</h3>
                <form method="post">
                  <input type="hidden" name="mode" value="encrypt" />
                  <label>平文:</label><br>
                  <input name="encrypt_input" value="{encrypt_input}" /><br><br>
                  <button type="submit">🔒 暗号化</button>
                </form>
                {"<h4>暗号化結果:</h4><textarea readonly>" + ciphertext + "</textarea>" if ciphertext else ""}
                {"<h4>curl:</h4><textarea readonly>" + encrypt_curl + "</textarea>" if encrypt_curl else ""}
              </div>
              <div class="box">
                <h3>🔓 復号化</h3>
                <form method="post">
                  <input type="hidden" name="mode" value="decrypt" />
                  <label>暗号文:</label><br>
                  <textarea name="decrypt_input">{decrypt_input}</textarea><br>
                  <button type="submit">🔓 復号化</button>
                </form>
                {"<h4>復号結果:</h4><textarea readonly>" + plaintext + "</textarea>" if plaintext else ""}
                {"<h4>curl:</h4><textarea readonly>" + decrypt_curl + "</textarea>" if decrypt_curl else ""}
              </div>
            </div>
          </body>
          </html>
         """
      
      @app.route("/transform", methods=["GET", "POST"])
      def transform_demo():
        VAULT_ADDR = "http://vault:8200"
        VAULT_TOKEN = "root"
        input_value = ""
        fpe_result = token_result = mask_result = ""
        fpe_curl = token_curl = mask_curl = ""
      
        if request.method == "POST":
          input_value = request.form["input_value"]
          role_map = {
            "fpe": ("fpe-pan-transform", "fpe-pan-role"),
            "token": ("token-ccn", "token-ccn-role"),
            "mask": ("mask-pan", "mask-pan-role"),
          }
      
          for ttype in ["fpe", "token", "mask"]:
            tpl, role = role_map[ttype]
            res = requests.post(
              f"{VAULT_ADDR}/v1/transform/encode/{role}",
              headers={"X-Vault-Token": VAULT_TOKEN},
              json={"value": input_value, "role": role}
            ).json()
            result = res.get("data", {}).get("encoded_value", "")
            curl = f"""curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{"value":"{input_value}","role":"{role}"}}' {VAULT_ADDR}/v1/transform/encode/{role}"""
            if ttype == "fpe":
              fpe_result, fpe_curl = result, curl
            elif ttype == "token":
              token_result, token_curl = result, curl
            elif ttype == "mask":
              mask_result, mask_curl = result, curl
        return f"""
        <html>
        <head>
        <style>
          body {{ font-family: Arial; }}
          .container {{ display: flex; gap: 30px; flex-wrap: wrap; }}
          .box {{ flex: 1; border: 1px solid #ccc; padding: 20px; min-width: 300px; }}
          input, textarea {{ width: 100%; margin-top: 8px; }}
          textarea {{ height: 80px; }}
        </style>
        </head>
        <body>
        <h2>🔣 Vault Transform Engine Demo</h2>
        <a href="/">⬅ 戻る</a> |
        <a href="/transit">🔁 Transit デモへ</a>
        <form method="post">
          <label>変換対象データ:</label><br>
          <input name="input_value" value="{input_value}" /><br><br>
          <button type="submit">🚀 変換を実行</button>
        </form>
        <div class="container">
          <div class="box">
          <h3>🔐 FPE (例: クレジットカード番号)</h3>
          {"<textarea readonly>" + fpe_result + "</textarea>" if fpe_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + fpe_curl + "</textarea>" if fpe_curl else ""}
          </div>
          <div class="box">
          <h3>🔁 Tokenization (例: マイナンバー)</h3>
          {"<textarea readonly>" + token_result + "</textarea>" if token_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + token_curl + "</textarea>" if token_curl else ""}
          </div>
          <div class="box">
          <h3>🔍 Masking 表示</h3>
          {"<textarea readonly>" + mask_result + "</textarea>" if mask_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + mask_curl + "</textarea>" if mask_curl else ""}
          </div>
        </div>
        </body>
        </html>
        """
      
      if __name__ == "__main__":
          app.run(host="0.0.0.0", port=5000)
      EOF
      
      python app.py
      
    Environment:  <none>
    Mounts:
      /etc/tls from tls-certs (ro)
  Volumes:
   tls-certs:
    Type:          EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:        
    SizeLimit:     <unset>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      False   MinimumReplicasUnavailable
  Progressing    True    ReplicaSetUpdated
OldReplicaSets:  <none>
NewReplicaSet:   demo-app-5bbb7454c4 (1/1 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  2m14s  deployment-controller  Scaled up replica set demo-app-5bbb7454c4 from 0 to 1


Name:                   nginx-tls
Namespace:              default
CreationTimestamp:      Thu, 03 Jul 2025 18:44:57 +0900
Labels:                 app=nginx-tls
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=nginx-tls
Replicas:               1 desired | 1 updated | 1 total | 0 available | 1 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app=nginx-tls
  Service Account:  vault
  Containers:
   nginx:
    Image:        nginx:1.25
    Port:         443/TCP
    Host Port:    0/TCP
    Environment:  <none>
    Mounts:
      /etc/nginx/conf.d/default.conf from nginx-conf (rw,path="default.conf")
      /etc/nginx/ssl from ssl (rw)
   vault-agent:
    Image:      hashicorp/vault:1.15.4
    Port:       <none>
    Host Port:  <none>
    Command:
      vault
      agent
      -config=/etc/vault/config/vault-agent-config.hcl
    Environment:  <none>
    Mounts:
      /etc/nginx/ssl from ssl (rw)
      /etc/vault/config/vault-agent-config.hcl from nginx-conf (rw,path="vault-agent-config.hcl")
  Volumes:
   ssl:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
   nginx-conf:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          nginx-config
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      False   MinimumReplicasUnavailable
  Progressing    True    ReplicaSetUpdated
OldReplicaSets:  <none>
NewReplicaSet:   nginx-tls-5b74c74f46 (1/1 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  2m13s  deployment-controller  Scaled up replica set nginx-tls-5b74c74f46 from 0 to 1


Name:                   postgres
Namespace:              default
CreationTimestamp:      Thu, 03 Jul 2025 18:44:51 +0900
Labels:                 app=postgres
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=postgres
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=postgres
  Containers:
   postgres:
    Image:      postgres:15
    Port:       5432/TCP
    Host Port:  0/TCP
    Environment:
      POSTGRES_DB:        inventorydb
      POSTGRES_USER:      vaultadmin
      POSTGRES_PASSWORD:  password
    Mounts:
      /var/lib/postgresql/data from postgres-storage (rw)
  Volumes:
   postgres-storage:
    Type:          EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:        
    SizeLimit:     <unset>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   postgres-b85d56587 (1/1 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  2m19s  deployment-controller  Scaled up replica set postgres-b85d56587 from 0 to 1


Name:                   vault-agent-injector
Namespace:              default
CreationTimestamp:      Thu, 03 Jul 2025 18:44:38 +0900
Labels:                 app.kubernetes.io/instance=vault
                        app.kubernetes.io/managed-by=Helm
                        app.kubernetes.io/name=vault-agent-injector
                        component=webhook
Annotations:            deployment.kubernetes.io/revision: 1
                        meta.helm.sh/release-name: vault
                        meta.helm.sh/release-namespace: default
Selector:               app.kubernetes.io/instance=vault,app.kubernetes.io/name=vault-agent-injector,component=webhook
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app.kubernetes.io/instance=vault
                    app.kubernetes.io/name=vault-agent-injector
                    component=webhook
  Service Account:  vault-agent-injector
  Containers:
   sidecar-injector:
    Image:      hashicorp/vault-k8s:1.6.2
    Port:       <none>
    Host Port:  <none>
    Args:
      agent-inject
      2>&1
    Liveness:   http-get https://:8080/health/ready delay=5s timeout=5s period=2s #success=1 #failure=2
    Readiness:  http-get https://:8080/health/ready delay=5s timeout=5s period=2s #success=1 #failure=2
    Startup:    http-get https://:8080/health/ready delay=5s timeout=5s period=5s #success=1 #failure=12
    Environment:
      AGENT_INJECT_LISTEN:                                 :8080
      AGENT_INJECT_LOG_LEVEL:                              info
      AGENT_INJECT_VAULT_ADDR:                             http://vault.default.svc:8200
      AGENT_INJECT_VAULT_AUTH_PATH:                        auth/kubernetes
      AGENT_INJECT_VAULT_IMAGE:                            hashicorp/vault:1.19.0
      AGENT_INJECT_TLS_AUTO:                               vault-agent-injector-cfg
      AGENT_INJECT_TLS_AUTO_HOSTS:                         vault-agent-injector-svc,vault-agent-injector-svc.default,vault-agent-injector-svc.default.svc
      AGENT_INJECT_LOG_FORMAT:                             standard
      AGENT_INJECT_REVOKE_ON_SHUTDOWN:                     false
      AGENT_INJECT_CPU_REQUEST:                            250m
      AGENT_INJECT_CPU_LIMIT:                              500m
      AGENT_INJECT_MEM_REQUEST:                            64Mi
      AGENT_INJECT_MEM_LIMIT:                              128Mi
      AGENT_INJECT_DEFAULT_TEMPLATE:                       map
      AGENT_INJECT_TEMPLATE_CONFIG_EXIT_ON_RETRY_FAILURE:  true
      POD_NAME:                                             (v1:metadata.name)
    Mounts:                                                <none>
  Volumes:                                                 <none>
  Node-Selectors:                                          <none>
  Tolerations:                                             <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   vault-agent-injector-75f9dfc9c8 (1/1 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  2m32s  deployment-controller  Scaled up replica set vault-agent-injector-75f9dfc9c8 from 0 to 1


Name:           demo-app-5bbb7454c4
Namespace:      default
Selector:       app=demo-app,pod-template-hash=5bbb7454c4
Labels:         app=demo-app
                pod-template-hash=5bbb7454c4
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
Controlled By:  Deployment/demo-app
Replicas:       1 current / 1 desired
Pods Status:    0 Running / 1 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app=demo-app
                    pod-template-hash=5bbb7454c4
  Annotations:      vault.hashicorp.com/agent-init-first: true
                    vault.hashicorp.com/agent-inject: true
                    vault.hashicorp.com/agent-inject-secret-db-creds: database/creds/readonly-role
                    vault.hashicorp.com/agent-inject-template-db-creds:
                      {{- with secret "database/creds/readonly-role" -}}
                      DB_USER={{ .Data.username }}
                      DB_PASSWORD={{ .Data.password }}
                      {{- end }}
                    vault.hashicorp.com/agent-pre-populate: true
                    vault.hashicorp.com/role: myapp-role
  Service Account:  vault
  Containers:
   app:
    Image:      python:3.11-slim
    Port:       5000/TCP
    Host Port:  0/TCP
    Command:
      /bin/sh
      -c
    Args:
      pip install flask psycopg2-binary requests pyOpenSSL pytz;
      
      cat <<EOF > app.py
      from flask import Flask, request, render_template_string, redirect
      import psycopg2, os, time, datetime, requests, pytz 
      
      app = Flask(__name__)
      is_auto_refresh = True
      initial_creds = {}
      initial_loaded_time = ""
      
      def load_env_file(path):
          creds = {}
          with open(path) as f:
              for line in f:
                  if "=" in line:
                      k, v = line.strip().split("=", 1)
                      creds[k] = v
          return creds
      
      def load_secret(path="/vault/secrets/db-creds"):
          if not os.path.exists(path):
              return None, "シークレットファイルが見つかりません", None
          try:
              creds = load_env_file(path)
              updated = os.path.getmtime(path)
              jst = pytz.timezone("Asia/Tokyo")
              updated_str = datetime.datetime.fromtimestamp(updated, tz=jst).strftime('%Y-%m-%d %H:%M:%S')
              vault_max_ttl = 30
              remaining = max(0, int(vault_max_ttl - (time.time() - updated)))
              return creds, updated_str, remaining
          except Exception as e:
              return None, str(e), None
      
      @app.route("/toggle", methods=["POST"])
      def toggle():
          global is_auto_refresh
          is_auto_refresh = not is_auto_refresh
          return redirect("/")
      
      @app.route("/")
      def index():
          global is_auto_refresh, initial_creds, initial_loaded_time
      
          secret_path = "/vault/secrets/db-creds"
          db_error = False
      
          jst = pytz.timezone("Asia/Tokyo")
      
          if is_auto_refresh:
              creds, updated_str, remaining_secs = load_secret(secret_path)
              if creds is None:
                  return error_screen(updated_str)
              remaining = f"{remaining_secs} 秒"
          else:
              if not initial_creds:
                  initial_creds, initial_loaded_time, _ = load_secret(secret_path)
              creds, updated_str, _ = initial_creds, initial_loaded_time, 0
              remaining = "Secret期限切れまであと少し・・・"
      
          try:
              connection = psycopg2.connect(
                  host="postgres",
                  dbname="inventorydb",
                  user=creds["DB_USER"],
                  password=creds["DB_PASSWORD"]
              )
              cursor = connection.cursor()
              cursor.execute("SELECT name, stock, updated_at FROM inventory")
              items = [{"name": r[0], "stock": r[1], "updated_at": r[2].astimezone(jst).strftime('%Y-%m-%d %H:%M:%S')} for r in cursor.fetchall()]
              cursor.close()
              connection.close()
          except Exception:
              db_error = True
              items = []
      
          html_template = '''
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="UTF-8">
              <meta http-equiv="refresh" content="3">
              <title>在庫管理ダッシュボード</title>
              <style>
                  body { font-family: 'Roboto', sans-serif; background-color: #f0f2f5; padding: 40px; }
                  .cards { display: flex; flex-wrap: wrap; gap: 20px; justify-content: center; }
                  .card {
                      background: {{ "white" if not db_error else "#ffe5e5" }};
                      border-radius: 12px;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                      padding: 20px;
                      width: 280px;
                      border: {{ "none" if not db_error else "2px solid red" }};
                  }
                  .section { margin-top: 40px; text-align: center; }
                  button { font-size: 1em; padding: 10px 20px; margin-bottom: 20px; }
              </style>
          </head>
          <body>
              <a href='/transit'>🔁 Transit デモへ</a>
              <a href='/transform'>🔣 Transform デモへ</a>
              <h1>📦 在庫管理ダッシュボード</h1>
      
              <div style="text-align: center;">
                <form action="/toggle" method="post" style="display: inline-block;">
                  <button type="submit">自動更新: {{ "ON 🔄" if is_auto_refresh else "OFF ⛔" }}</button>
                </form>
              </div>
              <div class="cards">
                  {% if db_error %}
                  <div class="card">
                      <h3 style="color:red;">⚠ 在庫データ取得エラー</h3>
                      <p>資格情報が無効になっている可能性があります。</p>
                      <p style="color:#888;">自動更新をONにしてVault Agentにより資格情報を更新してください。</p>
                  </div>
                  {% else %}
                  {% for item in items %}
                  <div class="card">
                      <h3>{{ item['name'] }}</h3>
                      <div>在庫数: {{ item['stock'] }}</div>
                      <div>更新日: {{ item['updated_at'] }}</div>
                  </div>
                  {% endfor %}
                  {% endif %}
              </div>
              <div class="section">
                  <h2>📂 Secret ファイルの状態</h2>
                  <div style="display: flex; justify-content: center;">
                  <table style="text-align: left;">
                      <tr><th style="padding: 4px 12px;">ファイルパス</th><td>{{ "/vault/secrets/db-creds" }}</td></tr>
                      <tr><th style="padding: 4px 12px;">最終更新日時</th><td>{{ updated_str }}</td></tr>
                      <tr><th style="padding: 4px 12px;">TTL 残り秒数</th><td>{{ remaining }}</td></tr>
                      <tr><th style="padding: 4px 12px;">DB_USER</th><td>{{ creds.get("DB_USER") }}</td></tr>
                      <tr><th style="padding: 4px 12px;">DB_PASSWORD</th><td>{{ creds.get("DB_PASSWORD") }}</td></tr>
                  </table>
                  </div>
              </div>
          </body></html>
          '''
      
          return render_template_string(html_template,
                                        items=items,
                                        creds=creds,
                                        updated_str=updated_str,
                                        remaining=remaining,
                                        is_auto_refresh=is_auto_refresh,
                                        db_error=db_error)
      
      def error_screen(message):
          return f'''
          <html><body style="text-align:center;padding:40px;font-family:sans-serif;">
          <h1 style="color:red;">現在、在庫情報を取得できません</h1>
          <p>{message}</p>
          <p style="color:#888;">自動更新がOFFの場合、一定時間で接続が無効になることがあります。</p>
          <form action="/toggle" method="post">
              <button type="submit">自動更新をONにする</button>
          </form>
          </body></html>
          '''
      
      @app.route("/transit", methods=["GET", "POST"])
      def transit_demo():
          VAULT_ADDR = "http://vault:8200"
          VAULT_TOKEN = "root"
          KEY_NAME = "my-transit-key"
      
          encrypt_input = decrypt_input = ""
          ciphertext = plaintext = ""
          encrypt_curl = decrypt_curl = ""
      
          if request.method == "POST":
              mode = request.form.get("mode")
      
              if mode == "encrypt":
                  encrypt_input = request.form["encrypt_input"]
                  b64 = encrypt_input.encode("utf-8").hex()
                  res = requests.post(
                      f"{VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}",
                      headers={"X-Vault-Token": VAULT_TOKEN},
                      json={"plaintext": b64}
                  ).json()
                  ciphertext = res["data"]["ciphertext"]
                  encrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"plaintext\":\"{b64}\"}}' {VAULT_ADDR}/v1/transit/encrypt/{KEY_NAME}"
      
              elif mode == "decrypt":
                  decrypt_input = request.form["decrypt_input"]
                  res = requests.post(
                      f"{VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}",
                      headers={"X-Vault-Token": VAULT_TOKEN},
                      json={"ciphertext": decrypt_input}
                  ).json()
                  dec = res["data"]["plaintext"]
                  plaintext = bytes.fromhex(dec).decode("utf-8")
                  decrypt_curl = f"curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{\"ciphertext\":\"{decrypt_input}\"}}' {VAULT_ADDR}/v1/transit/decrypt/{KEY_NAME}"
      
          return f"""
          <html>
          <head>
            <style>
              body {{ font-family: Arial; }}
              .container {{ display: flex; gap: 40px; }}
              .box {{ flex: 1; border: 1px solid #ccc; padding: 20px; }}
              input, textarea {{ width: 100%; margin-top: 8px; }}
              textarea {{ height: 100px; }}
            </style>
          </head>
          <body>
            <h2>🔐 Vault Transit Engine Demo</h2>
            <a href="/">⬅ DB Secret デモへ戻る</a>
            <div class="container">
              <div class="box">
                <h3>📝 暗号化</h3>
                <form method="post">
                  <input type="hidden" name="mode" value="encrypt" />
                  <label>平文:</label><br>
                  <input name="encrypt_input" value="{encrypt_input}" /><br><br>
                  <button type="submit">🔒 暗号化</button>
                </form>
                {"<h4>暗号化結果:</h4><textarea readonly>" + ciphertext + "</textarea>" if ciphertext else ""}
                {"<h4>curl:</h4><textarea readonly>" + encrypt_curl + "</textarea>" if encrypt_curl else ""}
              </div>
              <div class="box">
                <h3>🔓 復号化</h3>
                <form method="post">
                  <input type="hidden" name="mode" value="decrypt" />
                  <label>暗号文:</label><br>
                  <textarea name="decrypt_input">{decrypt_input}</textarea><br>
                  <button type="submit">🔓 復号化</button>
                </form>
                {"<h4>復号結果:</h4><textarea readonly>" + plaintext + "</textarea>" if plaintext else ""}
                {"<h4>curl:</h4><textarea readonly>" + decrypt_curl + "</textarea>" if decrypt_curl else ""}
              </div>
            </div>
          </body>
          </html>
         """
      
      @app.route("/transform", methods=["GET", "POST"])
      def transform_demo():
        VAULT_ADDR = "http://vault:8200"
        VAULT_TOKEN = "root"
        input_value = ""
        fpe_result = token_result = mask_result = ""
        fpe_curl = token_curl = mask_curl = ""
      
        if request.method == "POST":
          input_value = request.form["input_value"]
          role_map = {
            "fpe": ("fpe-pan-transform", "fpe-pan-role"),
            "token": ("token-ccn", "token-ccn-role"),
            "mask": ("mask-pan", "mask-pan-role"),
          }
      
          for ttype in ["fpe", "token", "mask"]:
            tpl, role = role_map[ttype]
            res = requests.post(
              f"{VAULT_ADDR}/v1/transform/encode/{role}",
              headers={"X-Vault-Token": VAULT_TOKEN},
              json={"value": input_value, "role": role}
            ).json()
            result = res.get("data", {}).get("encoded_value", "")
            curl = f"""curl -s -H 'X-Vault-Token: {VAULT_TOKEN}' -d '{{"value":"{input_value}","role":"{role}"}}' {VAULT_ADDR}/v1/transform/encode/{role}"""
            if ttype == "fpe":
              fpe_result, fpe_curl = result, curl
            elif ttype == "token":
              token_result, token_curl = result, curl
            elif ttype == "mask":
              mask_result, mask_curl = result, curl
        return f"""
        <html>
        <head>
        <style>
          body {{ font-family: Arial; }}
          .container {{ display: flex; gap: 30px; flex-wrap: wrap; }}
          .box {{ flex: 1; border: 1px solid #ccc; padding: 20px; min-width: 300px; }}
          input, textarea {{ width: 100%; margin-top: 8px; }}
          textarea {{ height: 80px; }}
        </style>
        </head>
        <body>
        <h2>🔣 Vault Transform Engine Demo</h2>
        <a href="/">⬅ 戻る</a> |
        <a href="/transit">🔁 Transit デモへ</a>
        <form method="post">
          <label>変換対象データ:</label><br>
          <input name="input_value" value="{input_value}" /><br><br>
          <button type="submit">🚀 変換を実行</button>
        </form>
        <div class="container">
          <div class="box">
          <h3>🔐 FPE (例: クレジットカード番号)</h3>
          {"<textarea readonly>" + fpe_result + "</textarea>" if fpe_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + fpe_curl + "</textarea>" if fpe_curl else ""}
          </div>
          <div class="box">
          <h3>🔁 Tokenization (例: マイナンバー)</h3>
          {"<textarea readonly>" + token_result + "</textarea>" if token_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + token_curl + "</textarea>" if token_curl else ""}
          </div>
          <div class="box">
          <h3>🔍 Masking 表示</h3>
          {"<textarea readonly>" + mask_result + "</textarea>" if mask_result else ""}
          {"<h4>curl:</h4><textarea readonly>" + mask_curl + "</textarea>" if mask_curl else ""}
          </div>
        </div>
        </body>
        </html>
        """
      
      if __name__ == "__main__":
          app.run(host="0.0.0.0", port=5000)
      EOF
      
      python app.py
      
    Environment:  <none>
    Mounts:
      /etc/tls from tls-certs (ro)
  Volumes:
   tls-certs:
    Type:          EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:        
    SizeLimit:     <unset>
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:
  Type    Reason            Age    From                   Message
  ----    ------            ----   ----                   -------
  Normal  SuccessfulCreate  2m14s  replicaset-controller  Created pod: demo-app-5bbb7454c4-vggzf


Name:           nginx-tls-5b74c74f46
Namespace:      default
Selector:       app=nginx-tls,pod-template-hash=5b74c74f46
Labels:         app=nginx-tls
                pod-template-hash=5b74c74f46
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
Controlled By:  Deployment/nginx-tls
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app=nginx-tls
                    pod-template-hash=5b74c74f46
  Service Account:  vault
  Containers:
   nginx:
    Image:        nginx:1.25
    Port:         443/TCP
    Host Port:    0/TCP
    Environment:  <none>
    Mounts:
      /etc/nginx/conf.d/default.conf from nginx-conf (rw,path="default.conf")
      /etc/nginx/ssl from ssl (rw)
   vault-agent:
    Image:      hashicorp/vault:1.15.4
    Port:       <none>
    Host Port:  <none>
    Command:
      vault
      agent
      -config=/etc/vault/config/vault-agent-config.hcl
    Environment:  <none>
    Mounts:
      /etc/nginx/ssl from ssl (rw)
      /etc/vault/config/vault-agent-config.hcl from nginx-conf (rw,path="vault-agent-config.hcl")
  Volumes:
   ssl:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
   nginx-conf:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          nginx-config
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:
  Type    Reason            Age    From                   Message
  ----    ------            ----   ----                   -------
  Normal  SuccessfulCreate  2m12s  replicaset-controller  Created pod: nginx-tls-5b74c74f46-rd5ss


Name:           postgres-b85d56587
Namespace:      default
Selector:       app=postgres,pod-template-hash=b85d56587
Labels:         app=postgres
                pod-template-hash=b85d56587
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
Controlled By:  Deployment/postgres
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  app=postgres
           pod-template-hash=b85d56587
  Containers:
   postgres:
    Image:      postgres:15
    Port:       5432/TCP
    Host Port:  0/TCP
    Environment:
      POSTGRES_DB:        inventorydb
      POSTGRES_USER:      vaultadmin
      POSTGRES_PASSWORD:  password
    Mounts:
      /var/lib/postgresql/data from postgres-storage (rw)
  Volumes:
   postgres-storage:
    Type:          EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:        
    SizeLimit:     <unset>
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:
  Type    Reason            Age    From                   Message
  ----    ------            ----   ----                   -------
  Normal  SuccessfulCreate  2m19s  replicaset-controller  Created pod: postgres-b85d56587-t9czm


Name:           vault-agent-injector-75f9dfc9c8
Namespace:      default
Selector:       app.kubernetes.io/instance=vault,app.kubernetes.io/name=vault-agent-injector,component=webhook,pod-template-hash=75f9dfc9c8
Labels:         app.kubernetes.io/instance=vault
                app.kubernetes.io/name=vault-agent-injector
                component=webhook
                pod-template-hash=75f9dfc9c8
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
                meta.helm.sh/release-name: vault
                meta.helm.sh/release-namespace: default
Controlled By:  Deployment/vault-agent-injector
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app.kubernetes.io/instance=vault
                    app.kubernetes.io/name=vault-agent-injector
                    component=webhook
                    pod-template-hash=75f9dfc9c8
  Service Account:  vault-agent-injector
  Containers:
   sidecar-injector:
    Image:      hashicorp/vault-k8s:1.6.2
    Port:       <none>
    Host Port:  <none>
    Args:
      agent-inject
      2>&1
    Liveness:   http-get https://:8080/health/ready delay=5s timeout=5s period=2s #success=1 #failure=2
    Readiness:  http-get https://:8080/health/ready delay=5s timeout=5s period=2s #success=1 #failure=2
    Startup:    http-get https://:8080/health/ready delay=5s timeout=5s period=5s #success=1 #failure=12
    Environment:
      AGENT_INJECT_LISTEN:                                 :8080
      AGENT_INJECT_LOG_LEVEL:                              info
      AGENT_INJECT_VAULT_ADDR:                             http://vault.default.svc:8200
      AGENT_INJECT_VAULT_AUTH_PATH:                        auth/kubernetes
      AGENT_INJECT_VAULT_IMAGE:                            hashicorp/vault:1.19.0
      AGENT_INJECT_TLS_AUTO:                               vault-agent-injector-cfg
      AGENT_INJECT_TLS_AUTO_HOSTS:                         vault-agent-injector-svc,vault-agent-injector-svc.default,vault-agent-injector-svc.default.svc
      AGENT_INJECT_LOG_FORMAT:                             standard
      AGENT_INJECT_REVOKE_ON_SHUTDOWN:                     false
      AGENT_INJECT_CPU_REQUEST:                            250m
      AGENT_INJECT_CPU_LIMIT:                              500m
      AGENT_INJECT_MEM_REQUEST:                            64Mi
      AGENT_INJECT_MEM_LIMIT:                              128Mi
      AGENT_INJECT_DEFAULT_TEMPLATE:                       map
      AGENT_INJECT_TEMPLATE_CONFIG_EXIT_ON_RETRY_FAILURE:  true
      POD_NAME:                                             (v1:metadata.name)
    Mounts:                                                <none>
  Volumes:                                                 <none>
  Node-Selectors:                                          <none>
  Tolerations:                                             <none>
Events:
  Type    Reason            Age    From                   Message
  ----    ------            ----   ----                   -------
  Normal  SuccessfulCreate  2m32s  replicaset-controller  Created pod: vault-agent-injector-75f9dfc9c8-pmwrk


Name:               vault
Namespace:          default
CreationTimestamp:  Thu, 03 Jul 2025 18:44:38 +0900
Selector:           app.kubernetes.io/instance=vault,app.kubernetes.io/name=vault,component=server
Labels:             app.kubernetes.io/instance=vault
                    app.kubernetes.io/managed-by=Helm
                    app.kubernetes.io/name=vault
Annotations:        meta.helm.sh/release-name: vault
                    meta.helm.sh/release-namespace: default
Replicas:           1 desired | 1 total
Update Strategy:    OnDelete
Pods Status:        1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app.kubernetes.io/instance=vault
                    app.kubernetes.io/name=vault
                    component=server
                    helm.sh/chart=vault-0.30.0
  Service Account:  vault
  Containers:
   vault:
    Image:       hashicorp/vault-enterprise:1.19.5-ent
    Ports:       8200/TCP, 8201/TCP, 8202/TCP
    Host Ports:  0/TCP, 0/TCP, 0/TCP
    Command:
      /bin/sh
      -ec
    Args:
      /usr/local/bin/docker-entrypoint.sh vault server -dev 
      
    Readiness:  exec [/bin/sh -ec vault status -tls-skip-verify] delay=5s timeout=3s period=5s #success=1 #failure=2
    Environment:
      HOST_IP:                    (v1:status.hostIP)
      POD_IP:                     (v1:status.podIP)
      VAULT_K8S_POD_NAME:         (v1:metadata.name)
      VAULT_K8S_NAMESPACE:        (v1:metadata.namespace)
      VAULT_ADDR:                http://127.0.0.1:8200
      VAULT_API_ADDR:            http://$(POD_IP):8200
      SKIP_CHOWN:                true
      SKIP_SETCAP:               true
      HOSTNAME:                   (v1:metadata.name)
      VAULT_CLUSTER_ADDR:        https://$(HOSTNAME).vault-internal:8201
      HOME:                      /home/vault
      VAULT_LICENSE_PATH:        /vault/license/vault.hclic
      VAULT_DEV_ROOT_TOKEN_ID:   root
      VAULT_DEV_LISTEN_ADDRESS:  [::]:8200
      VAULT_DEV_ROOT_TOKEN_ID:   root
      VAULT_LICENSE:             
    Mounts:
      /home/vault from home (rw)
      /vault/license from vault-license (ro)
  Volumes:
   vault-license:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  vault-enterprise-license
    Optional:    false
   home:
    Type:          EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:        
    SizeLimit:     <unset>
  Node-Selectors:  <none>
  Tolerations:     <none>
Volume Claims:     <none>
Events:
  Type    Reason            Age    From                    Message
  ----    ------            ----   ----                    -------
  Normal  SuccessfulCreate  2m32s  statefulset-controller  create Pod vault-0 in StatefulSet vault successful


Name:             postgres-init
Namespace:        default
Selector:         batch.kubernetes.io/controller-uid=0752bf69-2224-49c5-93ba-98746f0c83ca
Labels:           batch.kubernetes.io/controller-uid=0752bf69-2224-49c5-93ba-98746f0c83ca
                  batch.kubernetes.io/job-name=postgres-init
                  controller-uid=0752bf69-2224-49c5-93ba-98746f0c83ca
                  job-name=postgres-init
Annotations:      <none>
Parallelism:      1
Completions:      1
Completion Mode:  NonIndexed
Suspend:          false
Backoff Limit:    6
Start Time:       Thu, 03 Jul 2025 18:44:54 +0900
Completed At:     Thu, 03 Jul 2025 18:45:38 +0900
Duration:         44s
Pods Statuses:    0 Active (0 Ready) / 1 Succeeded / 0 Failed
Pod Template:
  Labels:  batch.kubernetes.io/controller-uid=0752bf69-2224-49c5-93ba-98746f0c83ca
           batch.kubernetes.io/job-name=postgres-init
           controller-uid=0752bf69-2224-49c5-93ba-98746f0c83ca
           job-name=postgres-init
  Containers:
   psql:
    Image:      postgres:15
    Port:       <none>
    Host Port:  <none>
    Command:
      psql
    Args:
      -U
      vaultadmin
      -d
      inventorydb
      -h
      postgres
      -f
      /sql/init.sql
    Environment:
      PGPASSWORD:  password
    Mounts:
      /sql from sql-volume (rw)
  Volumes:
   sql-volume:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          postgres-init-sql
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:
  Type    Reason            Age    From            Message
  ----    ------            ----   ----            -------
  Normal  SuccessfulCreate  2m16s  job-controller  Created pod: postgres-init-p4jfq
  Normal  Completed         92s    job-controller  Job completed


Name:             vault-init
Namespace:        default
Selector:         batch.kubernetes.io/controller-uid=af9e4924-abf6-447f-86de-be758d21edf3
Labels:           batch.kubernetes.io/controller-uid=af9e4924-abf6-447f-86de-be758d21edf3
                  batch.kubernetes.io/job-name=vault-init
                  controller-uid=af9e4924-abf6-447f-86de-be758d21edf3
                  job-name=vault-init
Annotations:      <none>
Parallelism:      1
Completions:      1
Completion Mode:  NonIndexed
Suspend:          false
Backoff Limit:    6
Start Time:       Thu, 03 Jul 2025 18:44:52 +0900
Pods Statuses:    1 Active (0 Ready) / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           batch.kubernetes.io/controller-uid=af9e4924-abf6-447f-86de-be758d21edf3
                    batch.kubernetes.io/job-name=vault-init
                    controller-uid=af9e4924-abf6-447f-86de-be758d21edf3
                    job-name=vault-init
  Service Account:  vault
  Containers:
   vault-init:
    Image:      hashicorp/vault:1.15.4
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/sh
      -c
    Args:
      set -e
      export VAULT_ADDR=http://vault.default.svc:8200
      
      # Kubernetes Auth
      vault auth enable kubernetes || true
      vault write auth/kubernetes/config \
        token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        kubernetes_host="https://${KUBERNETES_PORT_443_TCP_ADDR}:443" \
        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      echo 'path "database/creds/readonly-role" { capabilities = ["read"] }' > /tmp/myapp-policy.hcl
      vault policy write myapp-policy /tmp/myapp-policy.hcl
      vault write auth/kubernetes/role/myapp-role \
        bound_service_account_names=vault \
        bound_service_account_namespaces=default \
        policies=myapp-policy \
        ttl=1h
      echo 'path "pki-int/issue/nginx" { capabilities = ["update"] }' > /tmp/nginx-policy.hcl
      vault policy write nginx-policy /tmp/nginx-policy.hcl
      vault write auth/kubernetes/role/nginx-role \
        bound_service_account_names=vault \
        bound_service_account_namespaces=default \
        policies=nginx-policy \
        ttl=1h
      
      # Database
      vault secrets enable database || true
      vault write database/config/my-postgres-db \
        plugin_name=postgresql-database-plugin \
        allowed_roles=readonly-role \
        connection_url="postgresql://{{username}}:{{password}}@postgres:5432/inventorydb?sslmode=disable" \
        username="vaultadmin" \
        password="password"
      vault write database/roles/readonly-role \
        db_name=my-postgres-db \
        default_ttl="5" \
        max_ttl="30" \
        creation_statements=@/tmp/sql/readonly/readonly-role.sql
      
      # Transit
      vault secrets enable -path=transit transit || true
      vault write -f transit/keys/my-transit-key
      
      # PKI: Root
      echo "Enable Root PKI"
      vault secrets enable -path=pki-root pki || true
      vault write pki-root/root/generate/internal \
        common_name="Root CA" \
        ttl=87600h
      
      # PKI: Intermediate
      echo "Enable Intermediate PKI"
      vault secrets enable -path=pki-int pki || true
      vault write -format=json pki-int/intermediate/generate/internal \
        common_name="nginx Intermediate CA" \
        ttl=43800h > /tmp/intermediate-csr.json
      
      CSR=$(cat /tmp/intermediate-csr.json | grep '"csr"' | cut -d '"' -f4)
      printf "%b\n" "$CSR" > /tmp/intermediate.csr.pem
      
      echo "Sign Intermediate CSR with Root"
      vault write -format=json pki-root/root/sign-intermediate \
        csr=@/tmp/intermediate.csr.pem \
        format=pem ttl=43800h > /tmp/intermediate-cert.json
      
      CERT=$(cat /tmp/intermediate-cert.json | grep '"certificate"' | cut -d '"' -f4)
      printf "%b\n" "$CERT" > /tmp/intermediate.cert.pem
      
      # 🔁 修正ポイント: Root証明書を取得してbundle作成
      vault read -field=certificate pki-root/cert/ca > /tmp/root.cert.pem
      cat /tmp/intermediate.cert.pem /tmp/root.cert.pem > /tmp/intermediate-bundle.cert.pem
      
      echo "Set signed intermediate certificate"
      vault write pki-int/intermediate/set-signed \
        certificate=@/tmp/intermediate-bundle.cert.pem
      
      echo "Set issuing/CRL URLs"
      vault write pki-int/config/urls \
        issuing_certificates="$VAULT_ADDR/v1/pki-int/ca" \
        crl_distribution_points="$VAULT_ADDR/v1/pki-int/crl"
      
      echo "Create Role"
      vault write pki-int/roles/nginx \
        allowed_domains="nginx.example.com" \
        allow_subdomains=true \
        allow_bare_domains=true \
        max_ttl="72h"
      
      echo "Vault PKI Init Complete"
      
      echo "Enable Transform engine"
      vault secrets enable transform || true
      
      echo "Configure FPE for PAN"
       vault write transform/transformation/fpe-pan-transform \
        type=fpe \
        template="builtin/creditcardnumber" \
        allowed_roles="fpe-pan-role" \
        tweak_source="internal"
      
      vault write transform/role/fpe-pan-role \
        transformations=fpe-pan-transform
      
      echo "Configure Tokenization for Credit Card Number Format"
       vault write transform/transformations/tokenization/token-ccn \
        max_ttl=24h \
        allowed_roles=token-ccn-role
      
      vault write transform/role/token-ccn-role \
        transformations=token-ccn
      
      ## Masking for PAN display
      echo "Configure Masking for PAN"
      vault write transform/transformation/mask-pan \
        type=masking \
        template="builtin/creditcardnumber" \
        masking_character="*" \
        allowed_roles=mask-pan-role
      
      vault write transform/role/mask-pan-role \
        transformations=mask-pan
      
      echo "✅ Vault Transform configuration complete"
      
    Environment:
      VAULT_TOKEN:  root
    Mounts:
      /tmp/sql/init from init-sql-volume (rw)
      /tmp/sql/readonly from readonly-role-volume (rw)
  Volumes:
   init-sql-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      postgres-init-sql
    Optional:  false
   readonly-role-volume:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          readonly-role-sql
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:
  Type    Reason            Age    From            Message
  ----    ------            ----   ----            -------
  Normal  SuccessfulCreate  2m18s  job-controller  Created pod: vault-init-7d7lx
